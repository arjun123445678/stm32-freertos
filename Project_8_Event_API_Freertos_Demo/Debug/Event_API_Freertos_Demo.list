
Event_API_Freertos_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005d18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004b10  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b7c  20004b7c  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121d6  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002deb  00000000  00000000  00019272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be6  00000000  00000000  0001cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044a5  00000000  00000000  0001dbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011241  00000000  00000000  00022083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cedaf  00000000  00000000  000332c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102073  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000464c  00000000  00000000  001020b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00106704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bbc 	.word	0x08005bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005bbc 	.word	0x08005bbc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fc0f 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f837 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8c9 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f89d 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n=== FreeRTOS Event Group Demo ===\r\n");
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <main+0x5c>)
 8000514:	f004 ffb0 	bl	8005478 <puts>
  xEventGroup = xEventGroupCreate();
 8000518:	f001 ffea 	bl	80024f0 <xEventGroupCreate>
 800051c:	4603      	mov	r3, r0
 800051e:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <main+0x60>)
 8000520:	6013      	str	r3, [r2, #0]
  xTaskCreate(vTaskProducer, "Producer", 256, NULL, 2, &xTaskProducerHandle);
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <main+0x64>)
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000530:	490c      	ldr	r1, [pc, #48]	@ (8000564 <main+0x68>)
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <main+0x6c>)
 8000534:	f002 ff84 	bl	8003440 <xTaskCreate>
     xTaskCreate(vTaskConsumer, "Consumer", 256, NULL, 1, &xTaskConsumerHandle);
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <main+0x70>)
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	2301      	movs	r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2300      	movs	r3, #0
 8000542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000546:	490a      	ldr	r1, [pc, #40]	@ (8000570 <main+0x74>)
 8000548:	480a      	ldr	r0, [pc, #40]	@ (8000574 <main+0x78>)
 800054a:	f002 ff79 	bl	8003440 <xTaskCreate>

     vTaskStartScheduler();
 800054e:	f003 f8f3 	bl	8003738 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <main+0x56>
 8000556:	bf00      	nop
 8000558:	08005bd4 	.word	0x08005bd4
 800055c:	200000d0 	.word	0x200000d0
 8000560:	200000d4 	.word	0x200000d4
 8000564:	08005bfc 	.word	0x08005bfc
 8000568:	0800095d 	.word	0x0800095d
 800056c:	200000d8 	.word	0x200000d8
 8000570:	08005c08 	.word	0x08005c08
 8000574:	080009c9 	.word	0x080009c9

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f856 	bl	8005638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005ec:	2332      	movs	r3, #50	@ 0x32
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe9f 	bl	8001340 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 fa26 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000618:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f900 	bl	8001830 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000636:	f000 fa0f 	bl	8000a58 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 faf4 	bl	8001c70 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f9e3 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000088 	.word	0x20000088
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	4ba2      	ldr	r3, [pc, #648]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4aa1      	ldr	r2, [pc, #644]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b9f      	ldr	r3, [pc, #636]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	4b9b      	ldr	r3, [pc, #620]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a9a      	ldr	r2, [pc, #616]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b98      	ldr	r3, [pc, #608]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b94      	ldr	r3, [pc, #592]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a93      	ldr	r2, [pc, #588]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b91      	ldr	r3, [pc, #580]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b8d      	ldr	r3, [pc, #564]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a8c      	ldr	r2, [pc, #560]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b8a      	ldr	r3, [pc, #552]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b86      	ldr	r3, [pc, #536]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a85      	ldr	r2, [pc, #532]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b83      	ldr	r3, [pc, #524]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b7f      	ldr	r3, [pc, #508]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a7e      	ldr	r2, [pc, #504]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b7c      	ldr	r3, [pc, #496]	@ (8000944 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	4879      	ldr	r0, [pc, #484]	@ (8000948 <MX_GPIO_Init+0x2a8>)
 8000764:	f000 fdd2 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	4877      	ldr	r0, [pc, #476]	@ (800094c <MX_GPIO_Init+0x2ac>)
 800076e:	f000 fdcd 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000772:	2200      	movs	r2, #0
 8000774:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000778:	4875      	ldr	r0, [pc, #468]	@ (8000950 <MX_GPIO_Init+0x2b0>)
 800077a:	f000 fdc7 	bl	800130c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800077e:	2308      	movs	r3, #8
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	486c      	ldr	r0, [pc, #432]	@ (8000948 <MX_GPIO_Init+0x2a8>)
 8000796:	f000 fc1d 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4866      	ldr	r0, [pc, #408]	@ (800094c <MX_GPIO_Init+0x2ac>)
 80007b2:	f000 fc0f 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007b6:	2308      	movs	r3, #8
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c6:	2305      	movs	r3, #5
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	485e      	ldr	r0, [pc, #376]	@ (800094c <MX_GPIO_Init+0x2ac>)
 80007d2:	f000 fbff 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	485a      	ldr	r0, [pc, #360]	@ (8000954 <MX_GPIO_Init+0x2b4>)
 80007ec:	f000 fbf2 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007f0:	2310      	movs	r3, #16
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000800:	2306      	movs	r3, #6
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4852      	ldr	r0, [pc, #328]	@ (8000954 <MX_GPIO_Init+0x2b4>)
 800080c:	f000 fbe2 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000810:	23e0      	movs	r3, #224	@ 0xe0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000820:	2305      	movs	r3, #5
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	484a      	ldr	r0, [pc, #296]	@ (8000954 <MX_GPIO_Init+0x2b4>)
 800082c:	f000 fbd2 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000830:	2304      	movs	r3, #4
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4845      	ldr	r0, [pc, #276]	@ (8000958 <MX_GPIO_Init+0x2b8>)
 8000844:	f000 fbc6 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483c      	ldr	r0, [pc, #240]	@ (8000958 <MX_GPIO_Init+0x2b8>)
 8000866:	f000 fbb5 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800086e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4833      	ldr	r0, [pc, #204]	@ (8000950 <MX_GPIO_Init+0x2b0>)
 8000884:	f000 fba6 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000888:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800089a:	2306      	movs	r3, #6
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4829      	ldr	r0, [pc, #164]	@ (800094c <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fb95 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4825      	ldr	r0, [pc, #148]	@ (8000954 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb88 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008c4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d6:	230a      	movs	r3, #10
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <MX_GPIO_Init+0x2b4>)
 80008e2:	f000 fb77 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008e6:	2320      	movs	r3, #32
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4815      	ldr	r0, [pc, #84]	@ (8000950 <MX_GPIO_Init+0x2b0>)
 80008fa:	f000 fb6b 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000904:	2312      	movs	r3, #18
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000910:	2304      	movs	r3, #4
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fb5a 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000924:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0x2a8>)
 8000936:	f000 fb4d 	bl	8000fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	@ 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400

0800095c <vTaskProducer>:

/* USER CODE BEGIN 4 */
void vTaskProducer(void *pvParameters)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    while (1)
    {
        printf("[Producer] Setting BIT_0\r\n");
 8000964:	4814      	ldr	r0, [pc, #80]	@ (80009b8 <vTaskProducer+0x5c>)
 8000966:	f004 fd87 	bl	8005478 <puts>
        xEventGroupSetBits(xEventGroup, BIT_0);
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <vTaskProducer+0x60>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fea9 	bl	80026c8 <xEventGroupSetBits>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097a:	f002 fea7 	bl	80036cc <vTaskDelay>

        printf("[Producer] Setting BIT_4\r\n");
 800097e:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <vTaskProducer+0x64>)
 8000980:	f004 fd7a 	bl	8005478 <puts>
        xEventGroupSetBits(xEventGroup, BIT_4);
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <vTaskProducer+0x60>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2110      	movs	r1, #16
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fe9c 	bl	80026c8 <xEventGroupSetBits>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000990:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000994:	f002 fe9a 	bl	80036cc <vTaskDelay>

        printf("[Producer] Setting BOTH bits\r\n");
 8000998:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <vTaskProducer+0x68>)
 800099a:	f004 fd6d 	bl	8005478 <puts>
        xEventGroupSetBits(xEventGroup, BIT_0 | BIT_4);
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <vTaskProducer+0x60>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2111      	movs	r1, #17
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fe8f 	bl	80026c8 <xEventGroupSetBits>
        vTaskDelay(pdMS_TO_TICKS(2000));
 80009aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ae:	f002 fe8d 	bl	80036cc <vTaskDelay>
        printf("[Producer] Setting BIT_0\r\n");
 80009b2:	bf00      	nop
 80009b4:	e7d6      	b.n	8000964 <vTaskProducer+0x8>
 80009b6:	bf00      	nop
 80009b8:	08005c14 	.word	0x08005c14
 80009bc:	200000d0 	.word	0x200000d0
 80009c0:	08005c30 	.word	0x08005c30
 80009c4:	08005c4c 	.word	0x08005c4c

080009c8 <vTaskConsumer>:
    }
}
void vTaskConsumer(void *pvParameters)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
    EventBits_t uxBits;

    while (1)
    {
        /* Wait for either BIT_0 or BIT_4 to be set */
        uxBits = xEventGroupWaitBits(
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <vTaskConsumer+0x54>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	2201      	movs	r2, #1
 80009de:	2111      	movs	r1, #17
 80009e0:	f001 fda0 	bl	8002524 <xEventGroupWaitBits>
 80009e4:	60f8      	str	r0, [r7, #12]
                    pdTRUE,    /* Clear bits on exit */
                    pdFALSE,   /* Wait for any bit */
                    portMAX_DELAY);

        /* Check which bits were set */
        if ((uxBits & (BIT_0 | BIT_4)) == (BIT_0 | BIT_4))
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f003 0311 	and.w	r3, r3, #17
 80009ec:	2b11      	cmp	r3, #17
 80009ee:	d103      	bne.n	80009f8 <vTaskConsumer+0x30>
        {
            printf("[Consumer] Both BIT_0 and BIT_4 were set!\r\n");
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <vTaskConsumer+0x58>)
 80009f2:	f004 fd41 	bl	8005478 <puts>
 80009f6:	e7eb      	b.n	80009d0 <vTaskConsumer+0x8>
        }
        else if (uxBits & BIT_0)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <vTaskConsumer+0x42>
        {
            printf("[Consumer] Only BIT_0 was set!\r\n");
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <vTaskConsumer+0x5c>)
 8000a04:	f004 fd38 	bl	8005478 <puts>
 8000a08:	e7e2      	b.n	80009d0 <vTaskConsumer+0x8>
        }
        else if (uxBits & BIT_4)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0dd      	beq.n	80009d0 <vTaskConsumer+0x8>
        {
            printf("[Consumer] Only BIT_4 was set!\r\n");
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <vTaskConsumer+0x60>)
 8000a16:	f004 fd2f 	bl	8005478 <puts>
        uxBits = xEventGroupWaitBits(
 8000a1a:	e7d9      	b.n	80009d0 <vTaskConsumer+0x8>
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	08005c6c 	.word	0x08005c6c
 8000a24:	08005c98 	.word	0x08005c98
 8000a28:	08005cb8 	.word	0x08005cb8

08000a2c <_write>:
        }
    }
}

int _write(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <_write+0x28>)
 8000a44:	f001 f964 	bl	8001d10 <HAL_UART_Transmit>
    return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000088 	.word	0x20000088

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f000 fa6a 	bl	8000f82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 fa4f 	bl	8000fd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f91f 	bl	8000dc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b8a:	f003 fac5 	bl	8004118 <xTaskGetSchedulerState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d001      	beq.n	8000b98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b94:	f004 f8d8 	bl	8004d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e00a      	b.n	8000bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bae:	f3af 8000 	nop.w
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf0      	blt.n	8000bae <_read+0x12>
  }

  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 fd30 	bl	80056d4 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20020000 	.word	0x20020000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	200000dc 	.word	0x200000dc
 8000ca8:	20004b80 	.word	0x20004b80

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 fcef 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fbfb 	bl	80004fc <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d14:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8000d18:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d1c:	20004b7c 	.word	0x20004b7c

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f90d 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe84 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f917 	bl	8000fba <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f8ed 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000e0 	.word	0x200000e0

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000e0 	.word	0x200000e0

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	@ (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	@ (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	@ 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff5c 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb0 	bl	8000f28 <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e16b      	b.n	80012c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 815a 	bne.w	80012c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80b4 	beq.w	80012c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b60      	ldr	r3, [pc, #384]	@ (80012e0 <HAL_GPIO_Init+0x30c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a5f      	ldr	r2, [pc, #380]	@ (80012e0 <HAL_GPIO_Init+0x30c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b5d      	ldr	r3, [pc, #372]	@ (80012e0 <HAL_GPIO_Init+0x30c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a5b      	ldr	r2, [pc, #364]	@ (80012e4 <HAL_GPIO_Init+0x310>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a52      	ldr	r2, [pc, #328]	@ (80012e8 <HAL_GPIO_Init+0x314>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d02b      	beq.n	80011fa <HAL_GPIO_Init+0x226>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a51      	ldr	r2, [pc, #324]	@ (80012ec <HAL_GPIO_Init+0x318>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x222>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <HAL_GPIO_Init+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x21e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	@ (80012f4 <HAL_GPIO_Init+0x320>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x21a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_GPIO_Init+0x324>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x216>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	@ (80012fc <HAL_GPIO_Init+0x328>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x212>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001300 <HAL_GPIO_Init+0x32c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x20e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001304 <HAL_GPIO_Init+0x330>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x20a>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00e      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011de:	2308      	movs	r3, #8
 80011e0:	e00c      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00a      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x228>
 80011fa:	2300      	movs	r3, #0
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120c:	4935      	ldr	r1, [pc, #212]	@ (80012e4 <HAL_GPIO_Init+0x310>)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_GPIO_Init+0x334>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123e:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_GPIO_Init+0x334>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <HAL_GPIO_Init+0x334>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001268:	4a27      	ldr	r2, [pc, #156]	@ (8001308 <HAL_GPIO_Init+0x334>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x334>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_GPIO_Init+0x334>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_GPIO_Init+0x334>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_GPIO_Init+0x334>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	f67f ae90 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40021400 	.word	0x40021400
 8001300:	40021800 	.word	0x40021800
 8001304:	40021c00 	.word	0x40021c00
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e267      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d075      	beq.n	800144a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800135e:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d00c      	beq.n	8001384 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b85      	ldr	r3, [pc, #532]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001372:	2b08      	cmp	r3, #8
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b82      	ldr	r3, [pc, #520]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001382:	d10b      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4b7e      	ldr	r3, [pc, #504]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d05b      	beq.n	8001448 <HAL_RCC_OscConfig+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e242      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x74>
 80013a6:	4b76      	ldr	r3, [pc, #472]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a75      	ldr	r2, [pc, #468]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e01d      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013d8:	4b69      	ldr	r3, [pc, #420]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a68      	ldr	r2, [pc, #416]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcfa 	bl	8000df0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fcf6 	bl	8000df0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e207      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b5b      	ldr	r3, [pc, #364]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0xc0>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fce6 	bl	8000df0 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fce2 	bl	8000df0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	@ 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1f3      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b51      	ldr	r3, [pc, #324]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0xe8>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001456:	4b4a      	ldr	r3, [pc, #296]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b47      	ldr	r3, [pc, #284]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800146a:	2b08      	cmp	r3, #8
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b44      	ldr	r3, [pc, #272]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1c7      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4937      	ldr	r1, [pc, #220]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	e03a      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_OscConfig+0x244>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc9b 	bl	8000df0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc97 	bl	8000df0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1a8      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4925      	ldr	r1, [pc, #148]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_RCC_OscConfig+0x244>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc7a 	bl	8000df0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fc76 	bl	8000df0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e187      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d036      	beq.n	8001598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d016      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_RCC_OscConfig+0x248>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fc5a 	bl	8000df0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fc56 	bl	8000df0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e167      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x240>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
 800155e:	e01b      	b.n	8001598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_RCC_OscConfig+0x248>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc43 	bl	8000df0 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e00e      	b.n	800158c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fc3f 	bl	8000df0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d907      	bls.n	800158c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e150      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
 8001580:	40023800 	.word	0x40023800
 8001584:	42470000 	.word	0x42470000
 8001588:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	4b88      	ldr	r3, [pc, #544]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ea      	bne.n	800156e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8097 	beq.w	80016d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015aa:	4b81      	ldr	r3, [pc, #516]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b7d      	ldr	r3, [pc, #500]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a7c      	ldr	r2, [pc, #496]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b7a      	ldr	r3, [pc, #488]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b77      	ldr	r3, [pc, #476]	@ (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b74      	ldr	r3, [pc, #464]	@ (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a73      	ldr	r2, [pc, #460]	@ (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fbff 	bl	8000df0 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fbfb 	bl	8000df0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e10c      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b6a      	ldr	r3, [pc, #424]	@ (80017b4 <HAL_RCC_OscConfig+0x474>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x2ea>
 800161c:	4b64      	ldr	r3, [pc, #400]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001620:	4a63      	ldr	r2, [pc, #396]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	@ 0x70
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x324>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x30c>
 8001632:	4b5f      	ldr	r3, [pc, #380]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	4a5e      	ldr	r2, [pc, #376]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6713      	str	r3, [r2, #112]	@ 0x70
 800163e:	4b5c      	ldr	r3, [pc, #368]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001642:	4a5b      	ldr	r2, [pc, #364]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	@ 0x70
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x324>
 800164c:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	4a57      	ldr	r2, [pc, #348]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	@ 0x70
 8001658:	4b55      	ldr	r3, [pc, #340]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	4a54      	ldr	r2, [pc, #336]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fbc0 	bl	8000df0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fbbc 	bl	8000df0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0cb      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	4b49      	ldr	r3, [pc, #292]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x334>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fbaa 	bl	8000df0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff fba6 	bl	8000df0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0b5      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a38      	ldr	r2, [pc, #224]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a1 	beq.w	8001820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016de:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d05c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d141      	bne.n	8001776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb7a 	bl	8000df0 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb76 	bl	8000df0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e087      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	3b01      	subs	r3, #1
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001740:	061b      	lsls	r3, r3, #24
 8001742:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x478>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb4f 	bl	8000df0 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb4b 	bl	8000df0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e05c      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x416>
 8001774:	e054      	b.n	8001820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_RCC_OscConfig+0x478>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb38 	bl	8000df0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb34 	bl	8000df0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e045      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x444>
 80017a2:	e03d      	b.n	8001820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e038      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x4ec>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d028      	beq.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d121      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d11a      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d111      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cc      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d90c      	bls.n	800186c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b65      	ldr	r3, [pc, #404]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a58      	ldr	r2, [pc, #352]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800188e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a52      	ldr	r2, [pc, #328]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d044      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e067      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b37      	ldr	r3, [pc, #220]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4934      	ldr	r1, [pc, #208]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fa66 	bl	8000df0 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff fa62 	bl	8000df0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d20c      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f9c6 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08005cf0 	.word	0x08005cf0
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a00:	b094      	sub	sp, #80	@ 0x50
 8001a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a14:	4b79      	ldr	r3, [pc, #484]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d00d      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x40>
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	f200 80e1 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2e:	e0db      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b73      	ldr	r3, [pc, #460]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a34:	e0db      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a36:	4b73      	ldr	r3, [pc, #460]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a3a:	e0d8      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a46:	4b6d      	ldr	r3, [pc, #436]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b6a      	ldr	r3, [pc, #424]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a66:	2300      	movs	r3, #0
 8001a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a6e:	4622      	mov	r2, r4
 8001a70:	462b      	mov	r3, r5
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4621      	mov	r1, r4
 8001a88:	1a51      	subs	r1, r2, r1
 8001a8a:	6139      	str	r1, [r7, #16]
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aaa:	4651      	mov	r1, sl
 8001aac:	018a      	lsls	r2, r1, #6
 8001aae:	4651      	mov	r1, sl
 8001ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab4:	4659      	mov	r1, fp
 8001ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ace:	4690      	mov	r8, r2
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	eb18 0303 	adds.w	r3, r8, r3
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	462b      	mov	r3, r5
 8001adc:	eb49 0303 	adc.w	r3, r9, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aee:	4629      	mov	r1, r5
 8001af0:	024b      	lsls	r3, r1, #9
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af8:	4621      	mov	r1, r4
 8001afa:	024a      	lsls	r2, r1, #9
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b02:	2200      	movs	r2, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b0c:	f7fe fb60 	bl	80001d0 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	2200      	movs	r2, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	4611      	mov	r1, r2
 8001b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b34:	4642      	mov	r2, r8
 8001b36:	464b      	mov	r3, r9
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	0159      	lsls	r1, r3, #5
 8001b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b46:	0150      	lsls	r0, r2, #5
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b52:	4649      	mov	r1, r9
 8001b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b70:	eb63 050b 	sbc.w	r5, r3, fp
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	00eb      	lsls	r3, r5, #3
 8001b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b82:	00e2      	lsls	r2, r4, #3
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4643      	mov	r3, r8
 8001b8a:	18e3      	adds	r3, r4, r3
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	464b      	mov	r3, r9
 8001b90:	eb45 0303 	adc.w	r3, r5, r3
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	61fa      	str	r2, [r7, #28]
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fb06 	bl	80001d0 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3750      	adds	r7, #80	@ 0x50
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08005d00 	.word	0x08005d00

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08005d00 	.word	0x08005d00

08001c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e042      	b.n	8001d08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe ff10 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f973 	bl	8001fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d175      	bne.n	8001e1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_UART_Transmit+0x2c>
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e06e      	b.n	8001e1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2221      	movs	r2, #33	@ 0x21
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff f84f 	bl	8000df0 <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d68:	d108      	bne.n	8001d7c <HAL_UART_Transmit+0x6c>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e003      	b.n	8001d84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d84:	e02e      	b.n	8001de4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f848 	bl	8001e26 <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e03a      	b.n	8001e1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	e007      	b.n	8001dd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1cb      	bne.n	8001d86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2140      	movs	r1, #64	@ 0x40
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f814 	bl	8001e26 <UART_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e006      	b.n	8001e1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e36:	e03b      	b.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d037      	beq.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	f7fe ffd6 	bl	8000df0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	6a3a      	ldr	r2, [r7, #32]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e03a      	b.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b80      	cmp	r3, #128	@ 0x80
 8001e6c:	d020      	beq.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b40      	cmp	r3, #64	@ 0x40
 8001e72:	d01d      	beq.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d116      	bne.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f81d 	bl	8001ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e00f      	b.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d0b4      	beq.n	8001e38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b095      	sub	sp, #84	@ 0x54
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	e853 3f00 	ldrex	r3, [r3]
 8001eee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f00:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f08:	e841 2300 	strex	r3, r2, [r1]
 8001f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e5      	bne.n	8001ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3314      	adds	r3, #20
 8001f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	e853 3f00 	ldrex	r3, [r3]
 8001f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3314      	adds	r3, #20
 8001f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f3c:	e841 2300 	strex	r3, r2, [r1]
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e5      	bne.n	8001f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d119      	bne.n	8001f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	330c      	adds	r3, #12
 8001f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	e853 3f00 	ldrex	r3, [r3]
 8001f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f023 0310 	bic.w	r3, r3, #16
 8001f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f70:	61ba      	str	r2, [r7, #24]
 8001f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f74:	6979      	ldr	r1, [r7, #20]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	e841 2300 	strex	r3, r2, [r1]
 8001f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e5      	bne.n	8001f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f92:	bf00      	nop
 8001f94:	3754      	adds	r7, #84	@ 0x54
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b0c0      	sub	sp, #256	@ 0x100
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	ea40 0301 	orr.w	r3, r0, r1
 8001fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ff8:	f021 010c 	bic.w	r1, r1, #12
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002006:	430b      	orrs	r3, r1
 8002008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201a:	6999      	ldr	r1, [r3, #24]
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	ea40 0301 	orr.w	r3, r0, r1
 8002026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b8f      	ldr	r3, [pc, #572]	@ (800226c <UART_SetConfig+0x2cc>)
 8002030:	429a      	cmp	r2, r3
 8002032:	d005      	beq.n	8002040 <UART_SetConfig+0xa0>
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b8d      	ldr	r3, [pc, #564]	@ (8002270 <UART_SetConfig+0x2d0>)
 800203c:	429a      	cmp	r2, r3
 800203e:	d104      	bne.n	800204a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002040:	f7ff fe02 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002044:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002048:	e003      	b.n	8002052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800204a:	f7ff fde9 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 800204e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800205c:	f040 810c 	bne.w	8002278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800206a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800206e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002072:	4622      	mov	r2, r4
 8002074:	462b      	mov	r3, r5
 8002076:	1891      	adds	r1, r2, r2
 8002078:	65b9      	str	r1, [r7, #88]	@ 0x58
 800207a:	415b      	adcs	r3, r3
 800207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800207e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002082:	4621      	mov	r1, r4
 8002084:	eb12 0801 	adds.w	r8, r2, r1
 8002088:	4629      	mov	r1, r5
 800208a:	eb43 0901 	adc.w	r9, r3, r1
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800209a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a2:	4690      	mov	r8, r2
 80020a4:	4699      	mov	r9, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	eb18 0303 	adds.w	r3, r8, r3
 80020ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020b0:	462b      	mov	r3, r5
 80020b2:	eb49 0303 	adc.w	r3, r9, r3
 80020b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020ce:	460b      	mov	r3, r1
 80020d0:	18db      	adds	r3, r3, r3
 80020d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020d4:	4613      	mov	r3, r2
 80020d6:	eb42 0303 	adc.w	r3, r2, r3
 80020da:	657b      	str	r3, [r7, #84]	@ 0x54
 80020dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020e4:	f7fe f874 	bl	80001d0 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4b61      	ldr	r3, [pc, #388]	@ (8002274 <UART_SetConfig+0x2d4>)
 80020ee:	fba3 2302 	umull	r2, r3, r3, r2
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	011c      	lsls	r4, r3, #4
 80020f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002100:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002108:	4642      	mov	r2, r8
 800210a:	464b      	mov	r3, r9
 800210c:	1891      	adds	r1, r2, r2
 800210e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002110:	415b      	adcs	r3, r3
 8002112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002118:	4641      	mov	r1, r8
 800211a:	eb12 0a01 	adds.w	sl, r2, r1
 800211e:	4649      	mov	r1, r9
 8002120:	eb43 0b01 	adc.w	fp, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002138:	4692      	mov	sl, r2
 800213a:	469b      	mov	fp, r3
 800213c:	4643      	mov	r3, r8
 800213e:	eb1a 0303 	adds.w	r3, sl, r3
 8002142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002146:	464b      	mov	r3, r9
 8002148:	eb4b 0303 	adc.w	r3, fp, r3
 800214c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800215c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002164:	460b      	mov	r3, r1
 8002166:	18db      	adds	r3, r3, r3
 8002168:	643b      	str	r3, [r7, #64]	@ 0x40
 800216a:	4613      	mov	r3, r2
 800216c:	eb42 0303 	adc.w	r3, r2, r3
 8002170:	647b      	str	r3, [r7, #68]	@ 0x44
 8002172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800217a:	f7fe f829 	bl	80001d0 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4611      	mov	r1, r2
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <UART_SetConfig+0x2d4>)
 8002186:	fba3 2301 	umull	r2, r3, r3, r1
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2264      	movs	r2, #100	@ 0x64
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	1acb      	subs	r3, r1, r3
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800219a:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <UART_SetConfig+0x2d4>)
 800219c:	fba3 2302 	umull	r2, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021a8:	441c      	add	r4, r3
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	1891      	adds	r1, r2, r2
 80021c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021c4:	415b      	adcs	r3, r3
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021cc:	4641      	mov	r1, r8
 80021ce:	1851      	adds	r1, r2, r1
 80021d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021d2:	4649      	mov	r1, r9
 80021d4:	414b      	adcs	r3, r1
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021e4:	4659      	mov	r1, fp
 80021e6:	00cb      	lsls	r3, r1, #3
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ee:	4651      	mov	r1, sl
 80021f0:	00ca      	lsls	r2, r1, #3
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	4642      	mov	r2, r8
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002200:	464b      	mov	r3, r9
 8002202:	460a      	mov	r2, r1
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002218:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800221c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002220:	460b      	mov	r3, r1
 8002222:	18db      	adds	r3, r3, r3
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002226:	4613      	mov	r3, r2
 8002228:	eb42 0303 	adc.w	r3, r2, r3
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002236:	f7fd ffcb 	bl	80001d0 <__aeabi_uldivmod>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <UART_SetConfig+0x2d4>)
 8002240:	fba3 1302 	umull	r1, r3, r3, r2
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	2164      	movs	r1, #100	@ 0x64
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	3332      	adds	r3, #50	@ 0x32
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <UART_SetConfig+0x2d4>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	f003 0207 	and.w	r2, r3, #7
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4422      	add	r2, r4
 8002266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002268:	e106      	b.n	8002478 <UART_SetConfig+0x4d8>
 800226a:	bf00      	nop
 800226c:	40011000 	.word	0x40011000
 8002270:	40011400 	.word	0x40011400
 8002274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800227c:	2200      	movs	r2, #0
 800227e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002282:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800228a:	4642      	mov	r2, r8
 800228c:	464b      	mov	r3, r9
 800228e:	1891      	adds	r1, r2, r2
 8002290:	6239      	str	r1, [r7, #32]
 8002292:	415b      	adcs	r3, r3
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
 8002296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800229a:	4641      	mov	r1, r8
 800229c:	1854      	adds	r4, r2, r1
 800229e:	4649      	mov	r1, r9
 80022a0:	eb43 0501 	adc.w	r5, r3, r1
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	00eb      	lsls	r3, r5, #3
 80022ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b2:	00e2      	lsls	r2, r4, #3
 80022b4:	4614      	mov	r4, r2
 80022b6:	461d      	mov	r5, r3
 80022b8:	4643      	mov	r3, r8
 80022ba:	18e3      	adds	r3, r4, r3
 80022bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022c0:	464b      	mov	r3, r9
 80022c2:	eb45 0303 	adc.w	r3, r5, r3
 80022c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022e6:	4629      	mov	r1, r5
 80022e8:	008b      	lsls	r3, r1, #2
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022f0:	4621      	mov	r1, r4
 80022f2:	008a      	lsls	r2, r1, #2
 80022f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022f8:	f7fd ff6a 	bl	80001d0 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4b60      	ldr	r3, [pc, #384]	@ (8002484 <UART_SetConfig+0x4e4>)
 8002302:	fba3 2302 	umull	r2, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	011c      	lsls	r4, r3, #4
 800230a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002314:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800231c:	4642      	mov	r2, r8
 800231e:	464b      	mov	r3, r9
 8002320:	1891      	adds	r1, r2, r2
 8002322:	61b9      	str	r1, [r7, #24]
 8002324:	415b      	adcs	r3, r3
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	4641      	mov	r1, r8
 800232e:	1851      	adds	r1, r2, r1
 8002330:	6139      	str	r1, [r7, #16]
 8002332:	4649      	mov	r1, r9
 8002334:	414b      	adcs	r3, r1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002344:	4659      	mov	r1, fp
 8002346:	00cb      	lsls	r3, r1, #3
 8002348:	4651      	mov	r1, sl
 800234a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234e:	4651      	mov	r1, sl
 8002350:	00ca      	lsls	r2, r1, #3
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	4603      	mov	r3, r0
 8002358:	4642      	mov	r2, r8
 800235a:	189b      	adds	r3, r3, r2
 800235c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002360:	464b      	mov	r3, r9
 8002362:	460a      	mov	r2, r1
 8002364:	eb42 0303 	adc.w	r3, r2, r3
 8002368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002376:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002384:	4649      	mov	r1, r9
 8002386:	008b      	lsls	r3, r1, #2
 8002388:	4641      	mov	r1, r8
 800238a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800238e:	4641      	mov	r1, r8
 8002390:	008a      	lsls	r2, r1, #2
 8002392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002396:	f7fd ff1b 	bl	80001d0 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	4b38      	ldr	r3, [pc, #224]	@ (8002484 <UART_SetConfig+0x4e4>)
 80023a2:	fba3 2301 	umull	r2, r3, r3, r1
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2264      	movs	r2, #100	@ 0x64
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	1acb      	subs	r3, r1, r3
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	3332      	adds	r3, #50	@ 0x32
 80023b4:	4a33      	ldr	r2, [pc, #204]	@ (8002484 <UART_SetConfig+0x4e4>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c0:	441c      	add	r4, r3
 80023c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023c6:	2200      	movs	r2, #0
 80023c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80023cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	1891      	adds	r1, r2, r2
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	415b      	adcs	r3, r3
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e0:	4641      	mov	r1, r8
 80023e2:	1851      	adds	r1, r2, r1
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	4649      	mov	r1, r9
 80023e8:	414b      	adcs	r3, r1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023f8:	4659      	mov	r1, fp
 80023fa:	00cb      	lsls	r3, r1, #3
 80023fc:	4651      	mov	r1, sl
 80023fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002402:	4651      	mov	r1, sl
 8002404:	00ca      	lsls	r2, r1, #3
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	4603      	mov	r3, r0
 800240c:	4642      	mov	r2, r8
 800240e:	189b      	adds	r3, r3, r2
 8002410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002412:	464b      	mov	r3, r9
 8002414:	460a      	mov	r2, r1
 8002416:	eb42 0303 	adc.w	r3, r2, r3
 800241a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	663b      	str	r3, [r7, #96]	@ 0x60
 8002426:	667a      	str	r2, [r7, #100]	@ 0x64
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002434:	4649      	mov	r1, r9
 8002436:	008b      	lsls	r3, r1, #2
 8002438:	4641      	mov	r1, r8
 800243a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800243e:	4641      	mov	r1, r8
 8002440:	008a      	lsls	r2, r1, #2
 8002442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002446:	f7fd fec3 	bl	80001d0 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <UART_SetConfig+0x4e4>)
 8002450:	fba3 1302 	umull	r1, r3, r3, r2
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	2164      	movs	r1, #100	@ 0x64
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	3332      	adds	r3, #50	@ 0x32
 8002462:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <UART_SetConfig+0x4e4>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	f003 020f 	and.w	r2, r3, #15
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4422      	add	r2, r4
 8002476:	609a      	str	r2, [r3, #8]
}
 8002478:	bf00      	nop
 800247a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002484:	51eb851f 	.word	0x51eb851f

08002488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4a06      	ldr	r2, [pc, #24]	@ (80024b8 <vApplicationGetIdleTaskMemory+0x30>)
 800249e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	601a      	str	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200000e4 	.word	0x200000e4
 80024b8:	20000140 	.word	0x20000140

080024bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a07      	ldr	r2, [pc, #28]	@ (80024e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80024cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <vApplicationGetTimerTaskMemory+0x30>)
 80024d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024da:	601a      	str	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000340 	.word	0x20000340
 80024ec:	2000039c 	.word	0x2000039c

080024f0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80024f6:	2020      	movs	r0, #32
 80024f8:	f002 fcb8 	bl	8004e6c <pvPortMalloc>
 80024fc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f988 	bl	8002824 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800251a:	687b      	ldr	r3, [r7, #4]
	}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	@ 0x40
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002562:	d30b      	bcc.n	800257c <xEventGroupWaitBits+0x58>
	__asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	61fb      	str	r3, [r7, #28]
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <xEventGroupWaitBits+0x76>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	61bb      	str	r3, [r7, #24]
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800259a:	f001 fdbd 	bl	8004118 <xTaskGetSchedulerState>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <xEventGroupWaitBits+0x86>
 80025a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <xEventGroupWaitBits+0x8a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xEventGroupWaitBits+0x8c>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <xEventGroupWaitBits+0xa8>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	617b      	str	r3, [r7, #20]
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80025cc:	f001 f91c 	bl	8003808 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025dc:	f000 f900 	bl	80027e0 <prvTestWaitCondition>
 80025e0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e020      	b.n	8002648 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8002610:	2301      	movs	r3, #1
 8002612:	633b      	str	r3, [r7, #48]	@ 0x30
 8002614:	e018      	b.n	8002648 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800261c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002630:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	1d18      	adds	r0, r3, #4
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263a:	4313      	orrs	r3, r2
 800263c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800263e:	4619      	mov	r1, r3
 8002640:	f001 fadc 	bl	8003bfc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002648:	f001 f8ec 	bl	8003824 <xTaskResumeAll>
 800264c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800264e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002650:	2b00      	cmp	r3, #0
 8002652:	d031      	beq.n	80026b8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d107      	bne.n	800266a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <xEventGroupWaitBits+0x1a0>)
 800265c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800266a:	f001 fde3 	bl	8004234 <uxTaskResetEventItemValue>
 800266e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11a      	bne.n	80026b0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800267a:	f002 fad5 	bl	8004c28 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800267e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800268a:	f000 f8a9 	bl	80027e0 <prvTestWaitCondition>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800269a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80026ac:	f002 faee 	bl	8004c8c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80026b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80026b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3740      	adds	r7, #64	@ 0x40
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	@ 0x38
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <xEventGroupSetBits+0x34>
	__asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	613b      	str	r3, [r7, #16]
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002702:	d30b      	bcc.n	800271c <xEventGroupSetBits+0x54>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60fb      	str	r3, [r7, #12]
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	3304      	adds	r3, #4
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	3308      	adds	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002728:	f001 f86e 	bl	8003808 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	431a      	orrs	r2, r3
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800273e:	e03c      	b.n	80027ba <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002756:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800275e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8002776:	2301      	movs	r3, #1
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277a:	e008      	b.n	800278e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	429a      	cmp	r2, r3
 8002788:	d101      	bne.n	800278e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800278a:	2301      	movs	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d010      	beq.n	80027b6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800279e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	4619      	mov	r1, r3
 80027b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80027b2:	f001 faf1 	bl	8003d98 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80027ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1be      	bne.n	8002740 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80027d0:	f001 f828 	bl	8003824 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80027d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3738      	adds	r7, #56	@ 0x38
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e007      	b.n	8002816 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d101      	bne.n	8002816 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002812:	2301      	movs	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002816:	697b      	ldr	r3, [r7, #20]
}
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0208 	add.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f103 0208 	add.w	r2, r3, #8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0208 	add.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d103      	bne.n	80028e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e00c      	b.n	8002900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3308      	adds	r3, #8
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e002      	b.n	80028f4 <vListInsert+0x2e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d2f6      	bcs.n	80028ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d103      	bne.n	800296c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xQueueGenericReset+0x2c>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	60bb      	str	r3, [r7, #8]
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029b8:	f002 f936 	bl	8004c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	441a      	add	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	3b01      	subs	r3, #1
 80029ea:	68f9      	ldr	r1, [r7, #12]
 80029ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	22ff      	movs	r2, #255	@ 0xff
 80029fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	22ff      	movs	r2, #255	@ 0xff
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d114      	bne.n	8002a38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01a      	beq.n	8002a4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3310      	adds	r3, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 f958 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d012      	beq.n	8002a4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <xQueueGenericReset+0xd0>)
 8002a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	e009      	b.n	8002a4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fef1 	bl	8002824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3324      	adds	r3, #36	@ 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff feec 	bl	8002824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a4c:	f002 f91e 	bl	8004c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000ed04 	.word	0xe000ed04

08002a60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	@ 0x38
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <xQueueGenericCreateStatic+0x56>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <xQueueGenericCreateStatic+0x5a>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueGenericCreateStatic+0x5c>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	623b      	str	r3, [r7, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <xQueueGenericCreateStatic+0x84>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <xQueueGenericCreateStatic+0x88>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <xQueueGenericCreateStatic+0x8a>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	61fb      	str	r3, [r7, #28]
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	e7fd      	b.n	8002b02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b06:	2350      	movs	r3, #80	@ 0x50
 8002b08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b50      	cmp	r3, #80	@ 0x50
 8002b0e:	d00b      	beq.n	8002b28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f805 	bl	8002b5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3730      	adds	r7, #48	@ 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e002      	b.n	8002b7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b88:	2101      	movs	r1, #1
 8002b8a:	69b8      	ldr	r0, [r7, #24]
 8002b8c:	f7ff fefe 	bl	800298c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	@ 0x38
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <xQueueGenericSend+0x34>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSend+0x42>
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xQueueGenericSend+0x46>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueGenericSend+0x48>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <xQueueGenericSend+0x64>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSend+0x72>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <xQueueGenericSend+0x76>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <xQueueGenericSend+0x78>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <xQueueGenericSend+0x94>
	__asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	623b      	str	r3, [r7, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c34:	f001 fa70 	bl	8004118 <xTaskGetSchedulerState>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <xQueueGenericSend+0xa4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <xQueueGenericSend+0xa8>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <xQueueGenericSend+0xaa>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10b      	bne.n	8002c66 <xQueueGenericSend+0xc6>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	61fb      	str	r3, [r7, #28]
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c66:	f001 ffdf 	bl	8004c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d302      	bcc.n	8002c7c <xQueueGenericSend+0xdc>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d129      	bne.n	8002cd0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c82:	f000 fa0f 	bl	80030a4 <prvCopyDataToQueue>
 8002c86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	3324      	adds	r3, #36	@ 0x24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f81b 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8002da0 <xQueueGenericSend+0x200>)
 8002ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	e00a      	b.n	8002cc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cb8:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <xQueueGenericSend+0x200>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cc8:	f001 ffe0 	bl	8004c8c <vPortExitCritical>
				return pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e063      	b.n	8002d98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cd6:	f001 ffd9 	bl	8004c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e05c      	b.n	8002d98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f8b9 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cf2:	f001 ffcb 	bl	8004c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cf6:	f000 fd87 	bl	8003808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cfa:	f001 ff95 	bl	8004c28 <vPortEnterCritical>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d103      	bne.n	8002d14 <xQueueGenericSend+0x174>
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d103      	bne.n	8002d2a <xQueueGenericSend+0x18a>
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d2a:	f001 ffaf 	bl	8004c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d2e:	1d3a      	adds	r2, r7, #4
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 f8a8 	bl	8003e8c <xTaskCheckForTimeOut>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d124      	bne.n	8002d8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d44:	f000 faa6 	bl	8003294 <prvIsQueueFull>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d018      	beq.n	8002d80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	3310      	adds	r3, #16
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 ff2a 	bl	8003bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d5e:	f000 fa31 	bl	80031c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d62:	f000 fd5f 	bl	8003824 <xTaskResumeAll>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f47f af7c 	bne.w	8002c66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <xQueueGenericSend+0x200>)
 8002d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	e772      	b.n	8002c66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d82:	f000 fa1f 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d86:	f000 fd4d 	bl	8003824 <xTaskResumeAll>
 8002d8a:	e76c      	b.n	8002c66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d8e:	f000 fa19 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d92:	f000 fd47 	bl	8003824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3738      	adds	r7, #56	@ 0x38
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b090      	sub	sp, #64	@ 0x40
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <xQueueGenericSendFromISR+0x3e>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <xQueueGenericSendFromISR+0x42>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xQueueGenericSendFromISR+0x44>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d103      	bne.n	8002e12 <xQueueGenericSendFromISR+0x6e>
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <xQueueGenericSendFromISR+0x72>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <xQueueGenericSendFromISR+0x74>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e34:	f001 ffd8 	bl	8004de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e38:	f3ef 8211 	mrs	r2, BASEPRI
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <xQueueGenericSendFromISR+0xc2>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d12f      	bne.n	8002ec6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e7c:	f000 f912 	bl	80030a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d112      	bne.n	8002eb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e94:	3324      	adds	r3, #36	@ 0x24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ff1a 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e007      	b.n	8002ec0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	b25a      	sxtb	r2, r3
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002ec4:	e001      	b.n	8002eca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ed4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3740      	adds	r7, #64	@ 0x40
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	@ 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <xQueueReceive+0x32>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	623b      	str	r3, [r7, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	e7fd      	b.n	8002f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <xQueueReceive+0x40>
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueReceive+0x44>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueReceive+0x46>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <xQueueReceive+0x62>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	61fb      	str	r3, [r7, #28]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f42:	f001 f8e9 	bl	8004118 <xTaskGetSchedulerState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xQueueReceive+0x72>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueReceive+0x76>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueReceive+0x78>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xQueueReceive+0x94>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f74:	f001 fe58 	bl	8004c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01f      	beq.n	8002fc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f88:	f000 f8f6 	bl	8003178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00f      	beq.n	8002fbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	3310      	adds	r3, #16
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fe95 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fac:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <xQueueReceive+0x1c0>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fbc:	f001 fe66 	bl	8004c8c <vPortExitCritical>
				return pdPASS;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e069      	b.n	8003098 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fca:	f001 fe5f 	bl	8004c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e062      	b.n	8003098 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 ff3f 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fe6:	f001 fe51 	bl	8004c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fea:	f000 fc0d 	bl	8003808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fee:	f001 fe1b 	bl	8004c28 <vPortEnterCritical>
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d103      	bne.n	8003008 <xQueueReceive+0x128>
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800300e:	b25b      	sxtb	r3, r3
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d103      	bne.n	800301e <xQueueReceive+0x13e>
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800301e:	f001 fe35 	bl	8004c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003022:	1d3a      	adds	r2, r7, #4
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f000 ff2e 	bl	8003e8c <xTaskCheckForTimeOut>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d123      	bne.n	800307e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003038:	f000 f916 	bl	8003268 <prvIsQueueEmpty>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d017      	beq.n	8003072 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	3324      	adds	r3, #36	@ 0x24
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fdb0 	bl	8003bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003052:	f000 f8b7 	bl	80031c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003056:	f000 fbe5 	bl	8003824 <xTaskResumeAll>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d189      	bne.n	8002f74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003060:	4b0f      	ldr	r3, [pc, #60]	@ (80030a0 <xQueueReceive+0x1c0>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	e780      	b.n	8002f74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003074:	f000 f8a6 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003078:	f000 fbd4 	bl	8003824 <xTaskResumeAll>
 800307c:	e77a      	b.n	8002f74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800307e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003080:	f000 f8a0 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003084:	f000 fbce 	bl	8003824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800308a:	f000 f8ed 	bl	8003268 <prvIsQueueEmpty>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f43f af6f 	beq.w	8002f74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003096:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003098:	4618      	mov	r0, r3
 800309a:	3730      	adds	r7, #48	@ 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d14d      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f840 	bl	8004154 <xTaskPriorityDisinherit>
 80030d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e043      	b.n	8003166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d119      	bne.n	8003118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6858      	ldr	r0, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	461a      	mov	r2, r3
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	f002 fb1d 	bl	800572e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d32b      	bcc.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e026      	b.n	8003166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d8      	ldr	r0, [r3, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	461a      	mov	r2, r3
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	f002 fb03 	bl	800572e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	425b      	negs	r3, r3
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	425b      	negs	r3, r3
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d105      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d303      	bcc.n	80031ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68d9      	ldr	r1, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	461a      	mov	r2, r3
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f002 fab9 	bl	800572e <memcpy>
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031cc:	f001 fd2c 	bl	8004c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d8:	e011      	b.n	80031fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3324      	adds	r3, #36	@ 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fd72 	bl	8003cd0 <xTaskRemoveFromEventList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031f2:	f000 feaf 	bl	8003f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dce9      	bgt.n	80031da <prvUnlockQueue+0x16>
 8003206:	e000      	b.n	800320a <prvUnlockQueue+0x46>
					break;
 8003208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	22ff      	movs	r2, #255	@ 0xff
 800320e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003212:	f001 fd3b 	bl	8004c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003216:	f001 fd07 	bl	8004c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003222:	e011      	b.n	8003248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3310      	adds	r3, #16
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fd4d 	bl	8003cd0 <xTaskRemoveFromEventList>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800323c:	f000 fe8a 	bl	8003f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	3b01      	subs	r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800324c:	2b00      	cmp	r3, #0
 800324e:	dce9      	bgt.n	8003224 <prvUnlockQueue+0x60>
 8003250:	e000      	b.n	8003254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800325c:	f001 fd16 	bl	8004c8c <vPortExitCritical>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003270:	f001 fcda 	bl	8004c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800327c:	2301      	movs	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e001      	b.n	8003286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003286:	f001 fd01 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800329c:	f001 fcc4 	bl	8004c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d102      	bne.n	80032b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e001      	b.n	80032b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032b6:	f001 fce9 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e014      	b.n	80032fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003314 <vQueueAddToRegistry+0x50>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032e0:	490c      	ldr	r1, [pc, #48]	@ (8003314 <vQueueAddToRegistry+0x50>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <vQueueAddToRegistry+0x50>)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032f6:	e006      	b.n	8003306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b07      	cmp	r3, #7
 8003302:	d9e7      	bls.n	80032d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000079c 	.word	0x2000079c

08003318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003328:	f001 fc7e 	bl	8004c28 <vPortEnterCritical>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003332:	b25b      	sxtb	r3, r3
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d103      	bne.n	8003342 <vQueueWaitForMessageRestricted+0x2a>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003348:	b25b      	sxtb	r3, r3
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d103      	bne.n	8003358 <vQueueWaitForMessageRestricted+0x40>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003358:	f001 fc98 	bl	8004c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3324      	adds	r3, #36	@ 0x24
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fc83 	bl	8003c78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff26 	bl	80031c4 <prvUnlockQueue>
	}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	@ 0x38
 8003384:	af04      	add	r7, sp, #16
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	623b      	str	r3, [r7, #32]
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	61fb      	str	r3, [r7, #28]
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033ca:	235c      	movs	r3, #92	@ 0x5c
 80033cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80033d2:	d00b      	beq.n	80033ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61bb      	str	r3, [r7, #24]
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01e      	beq.n	8003432 <xTaskCreateStatic+0xb2>
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800340c:	2300      	movs	r3, #0
 800340e:	9303      	str	r3, [sp, #12]
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f850 	bl	80034ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800342a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800342c:	f000 f8de 	bl	80035ec <prvAddNewTaskToReadyList>
 8003430:	e001      	b.n	8003436 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003436:	697b      	ldr	r3, [r7, #20]
	}
 8003438:	4618      	mov	r0, r3
 800343a:	3728      	adds	r7, #40	@ 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	@ 0x30
 8003444:	af04      	add	r7, sp, #16
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f001 fd09 	bl	8004e6c <pvPortMalloc>
 800345a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003462:	205c      	movs	r0, #92	@ 0x5c
 8003464:	f001 fd02 	bl	8004e6c <pvPortMalloc>
 8003468:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
 8003476:	e005      	b.n	8003484 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003478:	6978      	ldr	r0, [r7, #20]
 800347a:	f001 fdc5 	bl	8005008 <vPortFree>
 800347e:	e001      	b.n	8003484 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	2300      	movs	r3, #0
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f80e 	bl	80034ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ae:	69f8      	ldr	r0, [r7, #28]
 80034b0:	f000 f89c 	bl	80035ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034b4:	2301      	movs	r3, #1
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e002      	b.n	80034c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034c0:	69bb      	ldr	r3, [r7, #24]
	}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b088      	sub	sp, #32
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	461a      	mov	r2, r3
 80034e2:	21a5      	movs	r1, #165	@ 0xa5
 80034e4:	f002 f8a8 	bl	8005638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034f2:	3b01      	subs	r3, #1
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f023 0307 	bic.w	r3, r3, #7
 8003500:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	617b      	str	r3, [r7, #20]
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01f      	beq.n	800356a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e012      	b.n	8003556 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	7819      	ldrb	r1, [r3, #0]
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	3334      	adds	r3, #52	@ 0x34
 8003540:	460a      	mov	r2, r1
 8003542:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d006      	beq.n	800355e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d9e9      	bls.n	8003530 <prvInitialiseNewTask+0x66>
 800355c:	e000      	b.n	8003560 <prvInitialiseNewTask+0x96>
			{
				break;
 800355e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	e003      	b.n	8003572 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	2b37      	cmp	r3, #55	@ 0x37
 8003576:	d901      	bls.n	800357c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003578:	2337      	movs	r3, #55	@ 0x37
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003580:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003586:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	3304      	adds	r3, #4
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f966 	bl	8002864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	3318      	adds	r3, #24
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff f961 	bl	8002864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	69b8      	ldr	r0, [r7, #24]
 80035cc:	f001 f9f8 	bl	80049c0 <pxPortInitialiseStack>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035e2:	bf00      	nop
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035f4:	f001 fb18 	bl	8004c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035f8:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <prvAddNewTaskToReadyList+0xc4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <prvAddNewTaskToReadyList+0xc4>)
 8003600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003602:	4b2c      	ldr	r3, [pc, #176]	@ (80036b4 <prvAddNewTaskToReadyList+0xc8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800360a:	4a2a      	ldr	r2, [pc, #168]	@ (80036b4 <prvAddNewTaskToReadyList+0xc8>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003610:	4b27      	ldr	r3, [pc, #156]	@ (80036b0 <prvAddNewTaskToReadyList+0xc4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d110      	bne.n	800363a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003618:	f000 fcc0 	bl	8003f9c <prvInitialiseTaskLists>
 800361c:	e00d      	b.n	800363a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <prvAddNewTaskToReadyList+0xcc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003626:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <prvAddNewTaskToReadyList+0xc8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d802      	bhi.n	800363a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003634:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <prvAddNewTaskToReadyList+0xc8>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <prvAddNewTaskToReadyList+0xd0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	4a1e      	ldr	r2, [pc, #120]	@ (80036bc <prvAddNewTaskToReadyList+0xd0>)
 8003642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <prvAddNewTaskToReadyList+0xd0>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <prvAddNewTaskToReadyList+0xd4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d903      	bls.n	8003660 <prvAddNewTaskToReadyList+0x74>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <prvAddNewTaskToReadyList+0xd4>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a15      	ldr	r2, [pc, #84]	@ (80036c4 <prvAddNewTaskToReadyList+0xd8>)
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f7ff f901 	bl	800287e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800367c:	f001 fb06 	bl	8004c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003680:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <prvAddNewTaskToReadyList+0xcc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <prvAddNewTaskToReadyList+0xc8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	429a      	cmp	r2, r3
 8003694:	d207      	bcs.n	80036a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003696:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <prvAddNewTaskToReadyList+0xdc>)
 8003698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000cb0 	.word	0x20000cb0
 80036b4:	200007dc 	.word	0x200007dc
 80036b8:	20000cbc 	.word	0x20000cbc
 80036bc:	20000ccc 	.word	0x20000ccc
 80036c0:	20000cb8 	.word	0x20000cb8
 80036c4:	200007e0 	.word	0x200007e0
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d018      	beq.n	8003710 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036de:	4b14      	ldr	r3, [pc, #80]	@ (8003730 <vTaskDelay+0x64>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <vTaskDelay+0x32>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036fe:	f000 f883 	bl	8003808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003702:	2100      	movs	r1, #0
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fdad 	bl	8004264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800370a:	f000 f88b 	bl	8003824 <xTaskResumeAll>
 800370e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003716:	4b07      	ldr	r3, [pc, #28]	@ (8003734 <vTaskDelay+0x68>)
 8003718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000cd8 	.word	0x20000cd8
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003746:	463a      	mov	r2, r7
 8003748:	1d39      	adds	r1, r7, #4
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fe9a 	bl	8002488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	9202      	str	r2, [sp, #8]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	460a      	mov	r2, r1
 8003766:	4922      	ldr	r1, [pc, #136]	@ (80037f0 <vTaskStartScheduler+0xb8>)
 8003768:	4822      	ldr	r0, [pc, #136]	@ (80037f4 <vTaskStartScheduler+0xbc>)
 800376a:	f7ff fe09 	bl	8003380 <xTaskCreateStatic>
 800376e:	4603      	mov	r3, r0
 8003770:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <vTaskStartScheduler+0xc0>)
 8003772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003774:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <vTaskStartScheduler+0xc0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e001      	b.n	8003786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800378c:	f000 fdbe 	bl	800430c <xTimerCreateTimerTask>
 8003790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d116      	bne.n	80037c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	613b      	str	r3, [r7, #16]
}
 80037aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <vTaskStartScheduler+0xc4>)
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295
 80037b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <vTaskStartScheduler+0xc8>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <vTaskStartScheduler+0xcc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037c0:	f001 f98e 	bl	8004ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037c4:	e00f      	b.n	80037e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d10b      	bne.n	80037e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	60fb      	str	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <vTaskStartScheduler+0xaa>
}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	08005cd8 	.word	0x08005cd8
 80037f4:	08003f6d 	.word	0x08003f6d
 80037f8:	20000cd4 	.word	0x20000cd4
 80037fc:	20000cd0 	.word	0x20000cd0
 8003800:	20000cbc 	.word	0x20000cbc
 8003804:	20000cb4 	.word	0x20000cb4

08003808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <vTaskSuspendAll+0x18>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a03      	ldr	r2, [pc, #12]	@ (8003820 <vTaskSuspendAll+0x18>)
 8003814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20000cd8 	.word	0x20000cd8

08003824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003832:	4b42      	ldr	r3, [pc, #264]	@ (800393c <xTaskResumeAll+0x118>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <xTaskResumeAll+0x2e>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	603b      	str	r3, [r7, #0]
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003852:	f001 f9e9 	bl	8004c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <xTaskResumeAll+0x118>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	4a37      	ldr	r2, [pc, #220]	@ (800393c <xTaskResumeAll+0x118>)
 800385e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003860:	4b36      	ldr	r3, [pc, #216]	@ (800393c <xTaskResumeAll+0x118>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d162      	bne.n	800392e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003868:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <xTaskResumeAll+0x11c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05e      	beq.n	800392e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003870:	e02f      	b.n	80038d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003872:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <xTaskResumeAll+0x120>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3318      	adds	r3, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff f85a 	bl	8002938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3304      	adds	r3, #4
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f855 	bl	8002938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003892:	4b2d      	ldr	r3, [pc, #180]	@ (8003948 <xTaskResumeAll+0x124>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d903      	bls.n	80038a2 <xTaskResumeAll+0x7e>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4a2a      	ldr	r2, [pc, #168]	@ (8003948 <xTaskResumeAll+0x124>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a27      	ldr	r2, [pc, #156]	@ (800394c <xTaskResumeAll+0x128>)
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe ffe0 	bl	800287e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c2:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <xTaskResumeAll+0x12c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80038cc:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <xTaskResumeAll+0x130>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <xTaskResumeAll+0x120>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1cb      	bne.n	8003872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038e0:	f000 fbfa 	bl	80040d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <xTaskResumeAll+0x134>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d010      	beq.n	8003912 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038f0:	f000 f846 	bl	8003980 <xTaskIncrementTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <xTaskResumeAll+0x130>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f1      	bne.n	80038f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800390c:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <xTaskResumeAll+0x134>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <xTaskResumeAll+0x130>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800391a:	2301      	movs	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800391e:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <xTaskResumeAll+0x138>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800392e:	f001 f9ad 	bl	8004c8c <vPortExitCritical>

	return xAlreadyYielded;
 8003932:	68bb      	ldr	r3, [r7, #8]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000cd8 	.word	0x20000cd8
 8003940:	20000cb0 	.word	0x20000cb0
 8003944:	20000c70 	.word	0x20000c70
 8003948:	20000cb8 	.word	0x20000cb8
 800394c:	200007e0 	.word	0x200007e0
 8003950:	200007dc 	.word	0x200007dc
 8003954:	20000cc4 	.word	0x20000cc4
 8003958:	20000cc0 	.word	0x20000cc0
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <xTaskGetTickCount+0x1c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800396c:	687b      	ldr	r3, [r7, #4]
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000cb4 	.word	0x20000cb4

08003980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800398a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <xTaskIncrementTick+0x148>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 8090 	bne.w	8003ab4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003994:	4b4d      	ldr	r3, [pc, #308]	@ (8003acc <xTaskIncrementTick+0x14c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800399c:	4a4b      	ldr	r2, [pc, #300]	@ (8003acc <xTaskIncrementTick+0x14c>)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d121      	bne.n	80039ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80039a8:	4b49      	ldr	r3, [pc, #292]	@ (8003ad0 <xTaskIncrementTick+0x150>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	603b      	str	r3, [r7, #0]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xTaskIncrementTick+0x46>
 80039ca:	4b41      	ldr	r3, [pc, #260]	@ (8003ad0 <xTaskIncrementTick+0x150>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <xTaskIncrementTick+0x154>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <xTaskIncrementTick+0x150>)
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad4 <xTaskIncrementTick+0x154>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad8 <xTaskIncrementTick+0x158>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad8 <xTaskIncrementTick+0x158>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	f000 fb76 	bl	80040d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039ec:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <xTaskIncrementTick+0x15c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d349      	bcc.n	8003a8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f6:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <xTaskIncrementTick+0x150>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a00:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <xTaskIncrementTick+0x15c>)
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	601a      	str	r2, [r3, #0]
					break;
 8003a08:	e03f      	b.n	8003a8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <xTaskIncrementTick+0x150>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d203      	bcs.n	8003a2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a22:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <xTaskIncrementTick+0x15c>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a28:	e02f      	b.n	8003a8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ff82 	bl	8002938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ff79 	bl	8002938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <xTaskIncrementTick+0x160>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d903      	bls.n	8003a5a <xTaskIncrementTick+0xda>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <xTaskIncrementTick+0x160>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <xTaskIncrementTick+0x164>)
 8003a68:	441a      	add	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fe ff04 	bl	800287e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <xTaskIncrementTick+0x168>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3b8      	bcc.n	80039f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a88:	e7b5      	b.n	80039f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <xTaskIncrementTick+0x168>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a90:	4914      	ldr	r1, [pc, #80]	@ (8003ae4 <xTaskIncrementTick+0x164>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d901      	bls.n	8003aa6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003aa6:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <xTaskIncrementTick+0x16c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e004      	b.n	8003abe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <xTaskIncrementTick+0x170>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <xTaskIncrementTick+0x170>)
 8003abc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000cd8 	.word	0x20000cd8
 8003acc:	20000cb4 	.word	0x20000cb4
 8003ad0:	20000c68 	.word	0x20000c68
 8003ad4:	20000c6c 	.word	0x20000c6c
 8003ad8:	20000cc8 	.word	0x20000cc8
 8003adc:	20000cd0 	.word	0x20000cd0
 8003ae0:	20000cb8 	.word	0x20000cb8
 8003ae4:	200007e0 	.word	0x200007e0
 8003ae8:	200007dc 	.word	0x200007dc
 8003aec:	20000cc4 	.word	0x20000cc4
 8003af0:	20000cc0 	.word	0x20000cc0

08003af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afa:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <vTaskSwitchContext+0xa8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b02:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <vTaskSwitchContext+0xac>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b08:	e042      	b.n	8003b90 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003b0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <vTaskSwitchContext+0xac>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e011      	b.n	8003b3c <vTaskSwitchContext+0x48>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <vTaskSwitchContext+0x42>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	607b      	str	r3, [r7, #4]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <vTaskSwitchContext+0x3e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	491a      	ldr	r1, [pc, #104]	@ (8003ba8 <vTaskSwitchContext+0xb4>)
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0e3      	beq.n	8003b18 <vTaskSwitchContext+0x24>
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ba8 <vTaskSwitchContext+0xb4>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3308      	adds	r3, #8
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d104      	bne.n	8003b80 <vTaskSwitchContext+0x8c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <vTaskSwitchContext+0xb8>)
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4a06      	ldr	r2, [pc, #24]	@ (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000cd8 	.word	0x20000cd8
 8003ba0:	20000cc4 	.word	0x20000cc4
 8003ba4:	20000cb8 	.word	0x20000cb8
 8003ba8:	200007e0 	.word	0x200007e0
 8003bac:	200007dc 	.word	0x200007dc

08003bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60fb      	str	r3, [r7, #12]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd8:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <vTaskPlaceOnEventList+0x48>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3318      	adds	r3, #24
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fe fe70 	bl	80028c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be6:	2101      	movs	r1, #1
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f000 fb3b 	bl	8004264 <prvAddCurrentTaskToDelayedList>
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200007dc 	.word	0x200007dc

08003bfc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	617b      	str	r3, [r7, #20]
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003c26:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	613b      	str	r3, [r7, #16]
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <vTaskPlaceOnUnorderedEventList+0x78>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c52:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <vTaskPlaceOnUnorderedEventList+0x78>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3318      	adds	r3, #24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7fe fe0f 	bl	800287e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c60:	2101      	movs	r1, #1
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fafe 	bl	8004264 <prvAddCurrentTaskToDelayedList>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000cd8 	.word	0x20000cd8
 8003c74:	200007dc 	.word	0x200007dc

08003c78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	617b      	str	r3, [r7, #20]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <vTaskPlaceOnEventListRestricted+0x54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7fe fde7 	bl	800287e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f000 fad0 	bl	8004264 <prvAddCurrentTaskToDelayedList>
	}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200007dc 	.word	0x200007dc

08003cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60fb      	str	r3, [r7, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3318      	adds	r3, #24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fe18 	bl	8002938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d08:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <xTaskRemoveFromEventList+0xb0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11d      	bne.n	8003d4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fe0f 	bl	8002938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1e:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <xTaskRemoveFromEventList+0xb4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <xTaskRemoveFromEventList+0x5e>
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <xTaskRemoveFromEventList+0xb4>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4a13      	ldr	r2, [pc, #76]	@ (8003d88 <xTaskRemoveFromEventList+0xb8>)
 8003d3c:	441a      	add	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7fe fd9a 	bl	800287e <vListInsertEnd>
 8003d4a:	e005      	b.n	8003d58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3318      	adds	r3, #24
 8003d50:	4619      	mov	r1, r3
 8003d52:	480e      	ldr	r0, [pc, #56]	@ (8003d8c <xTaskRemoveFromEventList+0xbc>)
 8003d54:	f7fe fd93 	bl	800287e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <xTaskRemoveFromEventList+0xc0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d905      	bls.n	8003d72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <xTaskRemoveFromEventList+0xc4>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e001      	b.n	8003d76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000cd8 	.word	0x20000cd8
 8003d84:	20000cb8 	.word	0x20000cb8
 8003d88:	200007e0 	.word	0x200007e0
 8003d8c:	20000c70 	.word	0x20000c70
 8003d90:	200007dc 	.word	0x200007dc
 8003d94:	20000cc4 	.word	0x20000cc4

08003d98 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003da2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e4c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	613b      	str	r3, [r7, #16]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	e7fd      	b.n	8003dec <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe fda1 	bl	8002938 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fd9c 	bl	8002938 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d903      	bls.n	8003e14 <vTaskRemoveFromUnorderedEventList+0x7c>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	4a0f      	ldr	r2, [pc, #60]	@ (8003e50 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003e22:	441a      	add	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7fe fd27 	bl	800287e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e34:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d902      	bls.n	8003e44 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003e3e:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
	}
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000cd8 	.word	0x20000cd8
 8003e50:	20000cb8 	.word	0x20000cb8
 8003e54:	200007e0 	.word	0x200007e0
 8003e58:	200007dc 	.word	0x200007dc
 8003e5c:	20000cc4 	.word	0x20000cc4

08003e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <vTaskInternalSetTimeOutState+0x24>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <vTaskInternalSetTimeOutState+0x28>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	20000cc8 	.word	0x20000cc8
 8003e88:	20000cb4 	.word	0x20000cb4

08003e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	613b      	str	r3, [r7, #16]
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	60fb      	str	r3, [r7, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ed2:	f000 fea9 	bl	8004c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <xTaskCheckForTimeOut+0xc0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d102      	bne.n	8003ef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e023      	b.n	8003f3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <xTaskCheckForTimeOut+0xc4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d007      	beq.n	8003f12 <xTaskCheckForTimeOut+0x86>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e015      	b.n	8003f3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d20b      	bcs.n	8003f34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff99 	bl	8003e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e004      	b.n	8003f3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f3e:	f000 fea5 	bl	8004c8c <vPortExitCritical>

	return xReturn;
 8003f42:	69fb      	ldr	r3, [r7, #28]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000cb4 	.word	0x20000cb4
 8003f50:	20000cc8 	.word	0x20000cc8

08003f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <vTaskMissedYield+0x14>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	20000cc4 	.word	0x20000cc4

08003f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f74:	f000 f852 	bl	800401c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <prvIdleTask+0x28>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d9f9      	bls.n	8003f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <prvIdleTask+0x2c>)
 8003f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f90:	e7f0      	b.n	8003f74 <prvIdleTask+0x8>
 8003f92:	bf00      	nop
 8003f94:	200007e0 	.word	0x200007e0
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	e00c      	b.n	8003fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4a12      	ldr	r2, [pc, #72]	@ (8003ffc <prvInitialiseTaskLists+0x60>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fc34 	bl	8002824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b37      	cmp	r3, #55	@ 0x37
 8003fc6:	d9ef      	bls.n	8003fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc8:	480d      	ldr	r0, [pc, #52]	@ (8004000 <prvInitialiseTaskLists+0x64>)
 8003fca:	f7fe fc2b 	bl	8002824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fce:	480d      	ldr	r0, [pc, #52]	@ (8004004 <prvInitialiseTaskLists+0x68>)
 8003fd0:	f7fe fc28 	bl	8002824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <prvInitialiseTaskLists+0x6c>)
 8003fd6:	f7fe fc25 	bl	8002824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fda:	480c      	ldr	r0, [pc, #48]	@ (800400c <prvInitialiseTaskLists+0x70>)
 8003fdc:	f7fe fc22 	bl	8002824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fe0:	480b      	ldr	r0, [pc, #44]	@ (8004010 <prvInitialiseTaskLists+0x74>)
 8003fe2:	f7fe fc1f 	bl	8002824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <prvInitialiseTaskLists+0x78>)
 8003fe8:	4a05      	ldr	r2, [pc, #20]	@ (8004000 <prvInitialiseTaskLists+0x64>)
 8003fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <prvInitialiseTaskLists+0x7c>)
 8003fee:	4a05      	ldr	r2, [pc, #20]	@ (8004004 <prvInitialiseTaskLists+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200007e0 	.word	0x200007e0
 8004000:	20000c40 	.word	0x20000c40
 8004004:	20000c54 	.word	0x20000c54
 8004008:	20000c70 	.word	0x20000c70
 800400c:	20000c84 	.word	0x20000c84
 8004010:	20000c9c 	.word	0x20000c9c
 8004014:	20000c68 	.word	0x20000c68
 8004018:	20000c6c 	.word	0x20000c6c

0800401c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004022:	e019      	b.n	8004058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004024:	f000 fe00 	bl	8004c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004028:	4b10      	ldr	r3, [pc, #64]	@ (800406c <prvCheckTasksWaitingTermination+0x50>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fc7f 	bl	8002938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <prvCheckTasksWaitingTermination+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	4a0b      	ldr	r2, [pc, #44]	@ (8004070 <prvCheckTasksWaitingTermination+0x54>)
 8004042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <prvCheckTasksWaitingTermination+0x58>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <prvCheckTasksWaitingTermination+0x58>)
 800404c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800404e:	f000 fe1d 	bl	8004c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f810 	bl	8004078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <prvCheckTasksWaitingTermination+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e1      	bne.n	8004024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000c84 	.word	0x20000c84
 8004070:	20000cb0 	.word	0x20000cb0
 8004074:	20000c98 	.word	0x20000c98

08004078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ffba 	bl	8005008 <vPortFree>
				vPortFree( pxTCB );
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 ffb7 	bl	8005008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800409a:	e019      	b.n	80040d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d103      	bne.n	80040ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 ffae 	bl	8005008 <vPortFree>
	}
 80040ac:	e010      	b.n	80040d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d00b      	beq.n	80040d0 <prvDeleteTCB+0x58>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <prvDeleteTCB+0x54>
	}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <prvResetNextTaskUnblockTime+0x38>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <prvResetNextTaskUnblockTime+0x3c>)
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040f0:	e008      	b.n	8004104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <prvResetNextTaskUnblockTime+0x38>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <prvResetNextTaskUnblockTime+0x3c>)
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000c68 	.word	0x20000c68
 8004114:	20000cd0 	.word	0x20000cd0

08004118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <xTaskGetSchedulerState+0x34>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004126:	2301      	movs	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e008      	b.n	800413e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <xTaskGetSchedulerState+0x38>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004134:	2302      	movs	r3, #2
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e001      	b.n	800413e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800413e:	687b      	ldr	r3, [r7, #4]
	}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000cbc 	.word	0x20000cbc
 8004150:	20000cd8 	.word	0x20000cd8

08004154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d058      	beq.n	800421c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800416a:	4b2f      	ldr	r3, [pc, #188]	@ (8004228 <xTaskPriorityDisinherit+0xd4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	429a      	cmp	r2, r3
 8004172:	d00b      	beq.n	800418c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60bb      	str	r3, [r7, #8]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	1e5a      	subs	r2, r3, #1
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d02c      	beq.n	800421c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d128      	bne.n	800421c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fbb2 	bl	8002938 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <xTaskPriorityDisinherit+0xd8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d903      	bls.n	80041fc <xTaskPriorityDisinherit+0xa8>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	4a0c      	ldr	r2, [pc, #48]	@ (800422c <xTaskPriorityDisinherit+0xd8>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <xTaskPriorityDisinherit+0xdc>)
 800420a:	441a      	add	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f7fe fb33 	bl	800287e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800421c:	697b      	ldr	r3, [r7, #20]
	}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200007dc 	.word	0x200007dc
 800422c:	20000cb8 	.word	0x20000cb8
 8004230:	200007e0 	.word	0x200007e0

08004234 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <uxTaskResetEventItemValue+0x2c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004242:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <uxTaskResetEventItemValue+0x2c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <uxTaskResetEventItemValue+0x2c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004250:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004252:	687b      	ldr	r3, [r7, #4]
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	200007dc 	.word	0x200007dc

08004264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800426e:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004274:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fb5c 	bl	8002938 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d10a      	bne.n	800429e <prvAddCurrentTaskToDelayedList+0x3a>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800428e:	4b1a      	ldr	r3, [pc, #104]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4819      	ldr	r0, [pc, #100]	@ (80042fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004298:	f7fe faf1 	bl	800287e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800429c:	e026      	b.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d209      	bcs.n	80042ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b6:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe faff 	bl	80028c6 <vListInsert>
}
 80042c8:	e010      	b.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fe faf5 	bl	80028c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d202      	bcs.n	80042ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000cb4 	.word	0x20000cb4
 80042f8:	200007dc 	.word	0x200007dc
 80042fc:	20000c9c 	.word	0x20000c9c
 8004300:	20000c6c 	.word	0x20000c6c
 8004304:	20000c68 	.word	0x20000c68
 8004308:	20000cd0 	.word	0x20000cd0

0800430c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	@ 0x28
 8004310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004316:	f000 fb13 	bl	8004940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800431a:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <xTimerCreateTimerTask+0x84>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800432a:	1d3a      	adds	r2, r7, #4
 800432c:	f107 0108 	add.w	r1, r7, #8
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe f8c1 	bl	80024bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	9202      	str	r2, [sp, #8]
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2302      	movs	r3, #2
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	460a      	mov	r2, r1
 800434c:	4911      	ldr	r1, [pc, #68]	@ (8004394 <xTimerCreateTimerTask+0x88>)
 800434e:	4812      	ldr	r0, [pc, #72]	@ (8004398 <xTimerCreateTimerTask+0x8c>)
 8004350:	f7ff f816 	bl	8003380 <xTaskCreateStatic>
 8004354:	4603      	mov	r3, r0
 8004356:	4a11      	ldr	r2, [pc, #68]	@ (800439c <xTimerCreateTimerTask+0x90>)
 8004358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <xTimerCreateTimerTask+0x90>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	613b      	str	r3, [r7, #16]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000d0c 	.word	0x20000d0c
 8004394:	08005ce0 	.word	0x08005ce0
 8004398:	080044d9 	.word	0x080044d9
 800439c:	20000d10 	.word	0x20000d10

080043a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	623b      	str	r3, [r7, #32]
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <xTimerGenericCommand+0x98>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02a      	beq.n	800442e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	dc18      	bgt.n	800441c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043ea:	f7ff fe95 	bl	8004118 <xTaskGetSchedulerState>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d109      	bne.n	8004408 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043f4:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <xTimerGenericCommand+0x98>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	f107 0110 	add.w	r1, r7, #16
 80043fc:	2300      	movs	r3, #0
 80043fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004400:	f7fe fbce 	bl	8002ba0 <xQueueGenericSend>
 8004404:	6278      	str	r0, [r7, #36]	@ 0x24
 8004406:	e012      	b.n	800442e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <xTimerGenericCommand+0x98>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	f107 0110 	add.w	r1, r7, #16
 8004410:	2300      	movs	r3, #0
 8004412:	2200      	movs	r2, #0
 8004414:	f7fe fbc4 	bl	8002ba0 <xQueueGenericSend>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
 800441a:	e008      	b.n	800442e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <xTimerGenericCommand+0x98>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	f107 0110 	add.w	r1, r7, #16
 8004424:	2300      	movs	r3, #0
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	f7fe fcbc 	bl	8002da4 <xQueueGenericSendFromISR>
 800442c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004430:	4618      	mov	r0, r3
 8004432:	3728      	adds	r7, #40	@ 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000d0c 	.word	0x20000d0c

0800443c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004446:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <prvProcessExpiredTimer+0x98>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3304      	adds	r3, #4
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fa6f 	bl	8002938 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	18d1      	adds	r1, r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	f000 f8d5 	bl	8004624 <prvInsertTimerInActiveList>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004480:	2300      	movs	r3, #0
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	2100      	movs	r1, #0
 800448a:	6978      	ldr	r0, [r7, #20]
 800448c:	f7ff ff88 	bl	80043a0 <xTimerGenericCommand>
 8004490:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d114      	bne.n	80044c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	4798      	blx	r3
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000d04 	.word	0x20000d04

080044d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f859 	bl	800459c <prvGetNextExpireTime>
 80044ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4619      	mov	r1, r3
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f805 	bl	8004500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044f6:	f000 f8d7 	bl	80046a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044fa:	bf00      	nop
 80044fc:	e7f0      	b.n	80044e0 <prvTimerTask+0x8>
	...

08004500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800450a:	f7ff f97d 	bl	8003808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f866 	bl	80045e4 <prvSampleTimeNow>
 8004518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d130      	bne.n	8004582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <prvProcessTimerOrBlockTask+0x3c>
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d806      	bhi.n	800453c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800452e:	f7ff f979 	bl	8003824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff81 	bl	800443c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800453a:	e024      	b.n	8004586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004542:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <prvProcessTimerOrBlockTask+0x90>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <prvProcessTimerOrBlockTask+0x50>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <prvProcessTimerOrBlockTask+0x52>
 8004550:	2300      	movs	r3, #0
 8004552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <prvProcessTimerOrBlockTask+0x94>)
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	f7fe fed9 	bl	8003318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004566:	f7ff f95d 	bl	8003824 <xTaskResumeAll>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <prvProcessTimerOrBlockTask+0x98>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
}
 8004580:	e001      	b.n	8004586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004582:	f7ff f94f 	bl	8003824 <xTaskResumeAll>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000d08 	.word	0x20000d08
 8004594:	20000d0c 	.word	0x20000d0c
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045a4:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <prvGetNextExpireTime+0x44>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <prvGetNextExpireTime+0x16>
 80045ae:	2201      	movs	r2, #1
 80045b0:	e000      	b.n	80045b4 <prvGetNextExpireTime+0x18>
 80045b2:	2200      	movs	r2, #0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045c0:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <prvGetNextExpireTime+0x44>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e001      	b.n	80045d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000d04 	.word	0x20000d04

080045e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045ec:	f7ff f9b8 	bl	8003960 <xTaskGetTickCount>
 80045f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <prvSampleTimeNow+0x3c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d205      	bcs.n	8004608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045fc:	f000 f93a 	bl	8004874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e002      	b.n	800460e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800460e:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <prvSampleTimeNow+0x3c>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000d14 	.word	0x20000d14

08004624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d812      	bhi.n	8004670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e01b      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <prvInsertTimerInActiveList+0x7c>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe f92c 	bl	80028c6 <vListInsert>
 800466e:	e012      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d206      	bcs.n	8004686 <prvInsertTimerInActiveList+0x62>
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e007      	b.n	8004696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004686:	4b07      	ldr	r3, [pc, #28]	@ (80046a4 <prvInsertTimerInActiveList+0x80>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe f918 	bl	80028c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004696:	697b      	ldr	r3, [r7, #20]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000d08 	.word	0x20000d08
 80046a4:	20000d04 	.word	0x20000d04

080046a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ae:	e0ce      	b.n	800484e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da19      	bge.n	80046ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	3304      	adds	r3, #4
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	61fb      	str	r3, [r7, #28]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e0:	6850      	ldr	r0, [r2, #4]
 80046e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e4:	6892      	ldr	r2, [r2, #8]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f2c0 80ae 	blt.w	800484e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe f918 	bl	8002938 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004708:	463b      	mov	r3, r7
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff6a 	bl	80045e4 <prvSampleTimeNow>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b09      	cmp	r3, #9
 8004716:	f200 8097 	bhi.w	8004848 <prvProcessReceivedCommands+0x1a0>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <prvProcessReceivedCommands+0x78>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004749 	.word	0x08004749
 8004724:	08004749 	.word	0x08004749
 8004728:	08004749 	.word	0x08004749
 800472c:	080047bf 	.word	0x080047bf
 8004730:	080047d3 	.word	0x080047d3
 8004734:	0800481f 	.word	0x0800481f
 8004738:	08004749 	.word	0x08004749
 800473c:	08004749 	.word	0x08004749
 8004740:	080047bf 	.word	0x080047bf
 8004744:	080047d3 	.word	0x080047d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	18d1      	adds	r1, r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004768:	f7ff ff5c 	bl	8004624 <prvInsertTimerInActiveList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d06c      	beq.n	800484c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d061      	beq.n	800484c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	441a      	add	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	2100      	movs	r1, #0
 8004798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800479a:	f7ff fe01 	bl	80043a0 <xTimerGenericCommand>
 800479e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d152      	bne.n	800484c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	61bb      	str	r3, [r7, #24]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047d0:	e03d      	b.n	800484e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	617b      	str	r3, [r7, #20]
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	e7fd      	b.n	8004806 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	18d1      	adds	r1, r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004818:	f7ff ff04 	bl	8004624 <prvInsertTimerInActiveList>
					break;
 800481c:	e017      	b.n	800484e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800482c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482e:	f000 fbeb 	bl	8005008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004832:	e00c      	b.n	800484e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004846:	e002      	b.n	800484e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004848:	bf00      	nop
 800484a:	e000      	b.n	800484e <prvProcessReceivedCommands+0x1a6>
					break;
 800484c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <prvProcessReceivedCommands+0x1c8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1d39      	adds	r1, r7, #4
 8004854:	2200      	movs	r2, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fb42 	bl	8002ee0 <xQueueReceive>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f47f af26 	bne.w	80046b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3730      	adds	r7, #48	@ 0x30
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000d0c 	.word	0x20000d0c

08004874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800487a:	e049      	b.n	8004910 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800487c:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004886:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe f84f 	bl	8002938 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02f      	beq.n	8004910 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d90e      	bls.n	80048e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f7fd fff4 	bl	80028c6 <vListInsert>
 80048de:	e017      	b.n	8004910 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	2100      	movs	r1, #0
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff fd58 	bl	80043a0 <xTimerGenericCommand>
 80048f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	603b      	str	r3, [r7, #0]
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1b0      	bne.n	800487c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800491a:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <prvSwitchTimerLists+0xc8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a04      	ldr	r2, [pc, #16]	@ (8004938 <prvSwitchTimerLists+0xc4>)
 8004926:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <prvSwitchTimerLists+0xc8>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6013      	str	r3, [r2, #0]
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000d04 	.word	0x20000d04
 800493c:	20000d08 	.word	0x20000d08

08004940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004946:	f000 f96f 	bl	8004c28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <prvCheckForValidListAndQueue+0x60>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d120      	bne.n	8004994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004952:	4814      	ldr	r0, [pc, #80]	@ (80049a4 <prvCheckForValidListAndQueue+0x64>)
 8004954:	f7fd ff66 	bl	8002824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004958:	4813      	ldr	r0, [pc, #76]	@ (80049a8 <prvCheckForValidListAndQueue+0x68>)
 800495a:	f7fd ff63 	bl	8002824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800495e:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <prvCheckForValidListAndQueue+0x6c>)
 8004960:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <prvCheckForValidListAndQueue+0x64>)
 8004962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <prvCheckForValidListAndQueue+0x70>)
 8004966:	4a10      	ldr	r2, [pc, #64]	@ (80049a8 <prvCheckForValidListAndQueue+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <prvCheckForValidListAndQueue+0x74>)
 8004970:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <prvCheckForValidListAndQueue+0x78>)
 8004972:	2110      	movs	r1, #16
 8004974:	200a      	movs	r0, #10
 8004976:	f7fe f873 	bl	8002a60 <xQueueGenericCreateStatic>
 800497a:	4603      	mov	r3, r0
 800497c:	4a08      	ldr	r2, [pc, #32]	@ (80049a0 <prvCheckForValidListAndQueue+0x60>)
 800497e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <prvCheckForValidListAndQueue+0x60>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <prvCheckForValidListAndQueue+0x60>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	490b      	ldr	r1, [pc, #44]	@ (80049bc <prvCheckForValidListAndQueue+0x7c>)
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fc98 	bl	80032c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004994:	f000 f97a 	bl	8004c8c <vPortExitCritical>
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000d0c 	.word	0x20000d0c
 80049a4:	20000cdc 	.word	0x20000cdc
 80049a8:	20000cf0 	.word	0x20000cf0
 80049ac:	20000d04 	.word	0x20000d04
 80049b0:	20000d08 	.word	0x20000d08
 80049b4:	20000db8 	.word	0x20000db8
 80049b8:	20000d18 	.word	0x20000d18
 80049bc:	08005ce8 	.word	0x08005ce8

080049c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b04      	subs	r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b04      	subs	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <pxPortInitialiseStack+0x64>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3b14      	subs	r3, #20
 80049fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3b04      	subs	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f06f 0202 	mvn.w	r2, #2
 8004a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3b20      	subs	r3, #32
 8004a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	08004a29 	.word	0x08004a29

08004a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <prvTaskExitError+0x58>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d00b      	beq.n	8004a54 <prvTaskExitError+0x2c>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <prvTaskExitError+0x28>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60bb      	str	r3, [r7, #8]
}
 8004a66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a68:	bf00      	nop
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0fc      	beq.n	8004a6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c
	...

08004a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <pxCurrentTCBConst2>)
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	6808      	ldr	r0, [r1, #0]
 8004a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9a:	f380 8809 	msr	PSP, r0
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8811 	msr	BASEPRI, r0
 8004aaa:	4770      	bx	lr
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst2>:
 8004ab0:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop

08004ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ab8:	4808      	ldr	r0, [pc, #32]	@ (8004adc <prvPortStartFirstTask+0x24>)
 8004aba:	6800      	ldr	r0, [r0, #0]
 8004abc:	6800      	ldr	r0, [r0, #0]
 8004abe:	f380 8808 	msr	MSP, r0
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8814 	msr	CONTROL, r0
 8004aca:	b662      	cpsie	i
 8004acc:	b661      	cpsie	f
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	df00      	svc	0
 8004ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ada:	bf00      	nop
 8004adc:	e000ed08 	.word	0xe000ed08

08004ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ae6:	4b47      	ldr	r3, [pc, #284]	@ (8004c04 <xPortStartScheduler+0x124>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a47      	ldr	r2, [pc, #284]	@ (8004c08 <xPortStartScheduler+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10b      	bne.n	8004b08 <xPortStartScheduler+0x28>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b08:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <xPortStartScheduler+0x124>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c0c <xPortStartScheduler+0x12c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10b      	bne.n	8004b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	613b      	str	r3, [r7, #16]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b2a:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <xPortStartScheduler+0x130>)
 8004b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <xPortStartScheduler+0x134>)
 8004b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b52:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b58:	e009      	b.n	8004b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d0ef      	beq.n	8004b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b7a:	4b27      	ldr	r3, [pc, #156]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d00b      	beq.n	8004b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bb0:	4a19      	ldr	r2, [pc, #100]	@ (8004c18 <xPortStartScheduler+0x138>)
 8004bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bbc:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bc8:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <xPortStartScheduler+0x13c>)
 8004bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bd4:	f000 f8da 	bl	8004d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <xPortStartScheduler+0x140>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bde:	f000 f8f9 	bl	8004dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <xPortStartScheduler+0x144>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c24 <xPortStartScheduler+0x144>)
 8004be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bee:	f7ff ff63 	bl	8004ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bf2:	f7fe ff7f 	bl	8003af4 <vTaskSwitchContext>
	prvTaskExitError();
 8004bf6:	f7ff ff17 	bl	8004a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	e000ed00 	.word	0xe000ed00
 8004c08:	410fc271 	.word	0x410fc271
 8004c0c:	410fc270 	.word	0x410fc270
 8004c10:	e000e400 	.word	0xe000e400
 8004c14:	20000e08 	.word	0x20000e08
 8004c18:	20000e0c 	.word	0x20000e0c
 8004c1c:	e000ed20 	.word	0xe000ed20
 8004c20:	2000000c 	.word	0x2000000c
 8004c24:	e000ef34 	.word	0xe000ef34

08004c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	607b      	str	r3, [r7, #4]
}
 8004c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c42:	4b10      	ldr	r3, [pc, #64]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <vPortEnterCritical+0x5c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d110      	bne.n	8004c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c54:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <vPortEnterCritical+0x60>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	603b      	str	r3, [r7, #0]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <vPortEnterCritical+0x4a>
	}
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <vPortExitCritical+0x26>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	607b      	str	r3, [r7, #4]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <vPortExitCritical+0x50>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <vPortExitCritical+0x44>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f383 8811 	msr	BASEPRI, r3
}
 8004cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	2000000c 	.word	0x2000000c

08004ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ce0:	f3ef 8009 	mrs	r0, PSP
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <pxCurrentTCBConst>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	f01e 0f10 	tst.w	lr, #16
 8004cf0:	bf08      	it	eq
 8004cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	6010      	str	r0, [r2, #0]
 8004cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d04:	f380 8811 	msr	BASEPRI, r0
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f7fe fef0 	bl	8003af4 <vTaskSwitchContext>
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f380 8811 	msr	BASEPRI, r0
 8004d1c:	bc09      	pop	{r0, r3}
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d26:	f01e 0f10 	tst.w	lr, #16
 8004d2a:	bf08      	it	eq
 8004d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d30:	f380 8809 	msr	PSP, r0
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst>:
 8004d40:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
}
 8004d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d62:	f7fe fe0d 	bl	8003980 <xTaskIncrementTick>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <xPortSysTickHandler+0x40>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f383 8811 	msr	BASEPRI, r3
}
 8004d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <vPortSetupTimerInterrupt+0x38>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <vPortSetupTimerInterrupt+0x3c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0a      	ldr	r2, [pc, #40]	@ (8004dcc <vPortSetupTimerInterrupt+0x40>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <vPortSetupTimerInterrupt+0x44>)
 8004daa:	3b01      	subs	r3, #1
 8004dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dae:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <vPortSetupTimerInterrupt+0x34>)
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e010 	.word	0xe000e010
 8004dc4:	e000e018 	.word	0xe000e018
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	10624dd3 	.word	0x10624dd3
 8004dd0:	e000e014 	.word	0xe000e014

08004dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004de4 <vPortEnableVFP+0x10>
 8004dd8:	6801      	ldr	r1, [r0, #0]
 8004dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dde:	6001      	str	r1, [r0, #0]
 8004de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004de2:	bf00      	nop
 8004de4:	e000ed88 	.word	0xe000ed88

08004de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dee:	f3ef 8305 	mrs	r3, IPSR
 8004df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	d915      	bls.n	8004e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dfa:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <vPortValidateInterruptPriority+0x74>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e04:	4b16      	ldr	r3, [pc, #88]	@ (8004e60 <vPortValidateInterruptPriority+0x78>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	7afa      	ldrb	r2, [r7, #11]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d20b      	bcs.n	8004e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e26:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <vPortValidateInterruptPriority+0x7c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e68 <vPortValidateInterruptPriority+0x80>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d90b      	bls.n	8004e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	603b      	str	r3, [r7, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <vPortValidateInterruptPriority+0x62>
	}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e3f0 	.word	0xe000e3f0
 8004e60:	20000e08 	.word	0x20000e08
 8004e64:	e000ed0c 	.word	0xe000ed0c
 8004e68:	20000e0c 	.word	0x20000e0c

08004e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	@ 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e78:	f7fe fcc6 	bl	8003808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff0 <pvPortMalloc+0x184>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e84:	f000 f924 	bl	80050d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e88:	4b5a      	ldr	r3, [pc, #360]	@ (8004ff4 <pvPortMalloc+0x188>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 8095 	bne.w	8004fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01e      	beq.n	8004eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d015      	beq.n	8004eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f023 0307 	bic.w	r3, r3, #7
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <pvPortMalloc+0x6e>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	617b      	str	r3, [r7, #20]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d06f      	beq.n	8004fc0 <pvPortMalloc+0x154>
 8004ee0:	4b45      	ldr	r3, [pc, #276]	@ (8004ff8 <pvPortMalloc+0x18c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d86a      	bhi.n	8004fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004eea:	4b44      	ldr	r3, [pc, #272]	@ (8004ffc <pvPortMalloc+0x190>)
 8004eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004eee:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <pvPortMalloc+0x190>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef4:	e004      	b.n	8004f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d903      	bls.n	8004f12 <pvPortMalloc+0xa6>
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f1      	bne.n	8004ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f12:	4b37      	ldr	r3, [pc, #220]	@ (8004ff0 <pvPortMalloc+0x184>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d051      	beq.n	8004fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	4413      	add	r3, r2
 8004f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	2308      	movs	r3, #8
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d920      	bls.n	8004f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <pvPortMalloc+0xfc>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f000 f90a 	bl	8005194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff8 <pvPortMalloc+0x18c>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <pvPortMalloc+0x18c>)
 8004f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <pvPortMalloc+0x18c>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b1b      	ldr	r3, [pc, #108]	@ (8005000 <pvPortMalloc+0x194>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d203      	bcs.n	8004fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f9a:	4b17      	ldr	r3, [pc, #92]	@ (8004ff8 <pvPortMalloc+0x18c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <pvPortMalloc+0x194>)
 8004fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <pvPortMalloc+0x188>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <pvPortMalloc+0x198>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <pvPortMalloc+0x198>)
 8004fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fc0:	f7fe fc30 	bl	8003824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60fb      	str	r3, [r7, #12]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	@ 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20004a18 	.word	0x20004a18
 8004ff4:	20004a2c 	.word	0x20004a2c
 8004ff8:	20004a1c 	.word	0x20004a1c
 8004ffc:	20004a10 	.word	0x20004a10
 8005000:	20004a20 	.word	0x20004a20
 8005004:	20004a24 	.word	0x20004a24

08005008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d04f      	beq.n	80050ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800501a:	2308      	movs	r3, #8
 800501c:	425b      	negs	r3, r3
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <vPortFree+0xbc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <vPortFree+0x46>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <vPortFree+0x66>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60bb      	str	r3, [r7, #8]
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	e7fd      	b.n	800506a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4b14      	ldr	r3, [pc, #80]	@ (80050c4 <vPortFree+0xbc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11a      	bne.n	80050ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	4b0e      	ldr	r3, [pc, #56]	@ (80050c4 <vPortFree+0xbc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005094:	f7fe fbb8 	bl	8003808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <vPortFree+0xc0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <vPortFree+0xc0>)
 80050a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050a6:	6938      	ldr	r0, [r7, #16]
 80050a8:	f000 f874 	bl	8005194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050ac:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <vPortFree+0xc4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4a06      	ldr	r2, [pc, #24]	@ (80050cc <vPortFree+0xc4>)
 80050b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050b6:	f7fe fbb5 	bl	8003824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20004a2c 	.word	0x20004a2c
 80050c8:	20004a1c 	.word	0x20004a1c
 80050cc:	20004a28 	.word	0x20004a28

080050d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80050da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050dc:	4b27      	ldr	r3, [pc, #156]	@ (800517c <prvHeapInit+0xac>)
 80050de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3307      	adds	r3, #7
 80050ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <prvHeapInit+0xac>)
 8005100:	4413      	add	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005108:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <prvHeapInit+0xb0>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800510e:	4b1c      	ldr	r3, [pc, #112]	@ (8005180 <prvHeapInit+0xb0>)
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4413      	add	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800511c:	2208      	movs	r2, #8
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <prvHeapInit+0xb4>)
 8005130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005132:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <prvHeapInit+0xb4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800513a:	4b12      	ldr	r3, [pc, #72]	@ (8005184 <prvHeapInit+0xb4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <prvHeapInit+0xb4>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <prvHeapInit+0xb8>)
 800515e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a09      	ldr	r2, [pc, #36]	@ (800518c <prvHeapInit+0xbc>)
 8005166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005168:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <prvHeapInit+0xc0>)
 800516a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800516e:	601a      	str	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000e10 	.word	0x20000e10
 8005180:	20004a10 	.word	0x20004a10
 8005184:	20004a18 	.word	0x20004a18
 8005188:	20004a20 	.word	0x20004a20
 800518c:	20004a1c 	.word	0x20004a1c
 8005190:	20004a2c 	.word	0x20004a2c

08005194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800519c:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <prvInsertBlockIntoFreeList+0xac>)
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e002      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x14>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d8f7      	bhi.n	80051a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4413      	add	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d108      	bne.n	80051d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	441a      	add	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d118      	bne.n	800521c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b15      	ldr	r3, [pc, #84]	@ (8005244 <prvInsertBlockIntoFreeList+0xb0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00d      	beq.n	8005212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	441a      	add	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e008      	b.n	8005224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e003      	b.n	8005224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d002      	beq.n	8005232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20004a10 	.word	0x20004a10
 8005244:	20004a18 	.word	0x20004a18

08005248 <std>:
 8005248:	2300      	movs	r3, #0
 800524a:	b510      	push	{r4, lr}
 800524c:	4604      	mov	r4, r0
 800524e:	e9c0 3300 	strd	r3, r3, [r0]
 8005252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005256:	6083      	str	r3, [r0, #8]
 8005258:	8181      	strh	r1, [r0, #12]
 800525a:	6643      	str	r3, [r0, #100]	@ 0x64
 800525c:	81c2      	strh	r2, [r0, #14]
 800525e:	6183      	str	r3, [r0, #24]
 8005260:	4619      	mov	r1, r3
 8005262:	2208      	movs	r2, #8
 8005264:	305c      	adds	r0, #92	@ 0x5c
 8005266:	f000 f9e7 	bl	8005638 <memset>
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <std+0x58>)
 800526c:	6263      	str	r3, [r4, #36]	@ 0x24
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <std+0x5c>)
 8005270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <std+0x60>)
 8005274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <std+0x64>)
 8005278:	6323      	str	r3, [r4, #48]	@ 0x30
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <std+0x68>)
 800527c:	6224      	str	r4, [r4, #32]
 800527e:	429c      	cmp	r4, r3
 8005280:	d006      	beq.n	8005290 <std+0x48>
 8005282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005286:	4294      	cmp	r4, r2
 8005288:	d002      	beq.n	8005290 <std+0x48>
 800528a:	33d0      	adds	r3, #208	@ 0xd0
 800528c:	429c      	cmp	r4, r3
 800528e:	d105      	bne.n	800529c <std+0x54>
 8005290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f000 ba46 	b.w	8005728 <__retarget_lock_init_recursive>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	bf00      	nop
 80052a0:	08005489 	.word	0x08005489
 80052a4:	080054ab 	.word	0x080054ab
 80052a8:	080054e3 	.word	0x080054e3
 80052ac:	08005507 	.word	0x08005507
 80052b0:	20004a30 	.word	0x20004a30

080052b4 <stdio_exit_handler>:
 80052b4:	4a02      	ldr	r2, [pc, #8]	@ (80052c0 <stdio_exit_handler+0xc>)
 80052b6:	4903      	ldr	r1, [pc, #12]	@ (80052c4 <stdio_exit_handler+0x10>)
 80052b8:	4803      	ldr	r0, [pc, #12]	@ (80052c8 <stdio_exit_handler+0x14>)
 80052ba:	f000 b869 	b.w	8005390 <_fwalk_sglue>
 80052be:	bf00      	nop
 80052c0:	20000010 	.word	0x20000010
 80052c4:	08005a45 	.word	0x08005a45
 80052c8:	20000020 	.word	0x20000020

080052cc <cleanup_stdio>:
 80052cc:	6841      	ldr	r1, [r0, #4]
 80052ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <cleanup_stdio+0x34>)
 80052d0:	4299      	cmp	r1, r3
 80052d2:	b510      	push	{r4, lr}
 80052d4:	4604      	mov	r4, r0
 80052d6:	d001      	beq.n	80052dc <cleanup_stdio+0x10>
 80052d8:	f000 fbb4 	bl	8005a44 <_fflush_r>
 80052dc:	68a1      	ldr	r1, [r4, #8]
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <cleanup_stdio+0x38>)
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <cleanup_stdio+0x1e>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fbad 	bl	8005a44 <_fflush_r>
 80052ea:	68e1      	ldr	r1, [r4, #12]
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <cleanup_stdio+0x3c>)
 80052ee:	4299      	cmp	r1, r3
 80052f0:	d004      	beq.n	80052fc <cleanup_stdio+0x30>
 80052f2:	4620      	mov	r0, r4
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f000 bba4 	b.w	8005a44 <_fflush_r>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	20004a30 	.word	0x20004a30
 8005304:	20004a98 	.word	0x20004a98
 8005308:	20004b00 	.word	0x20004b00

0800530c <global_stdio_init.part.0>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <global_stdio_init.part.0+0x30>)
 8005310:	4c0b      	ldr	r4, [pc, #44]	@ (8005340 <global_stdio_init.part.0+0x34>)
 8005312:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <global_stdio_init.part.0+0x38>)
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4620      	mov	r0, r4
 8005318:	2200      	movs	r2, #0
 800531a:	2104      	movs	r1, #4
 800531c:	f7ff ff94 	bl	8005248 <std>
 8005320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005324:	2201      	movs	r2, #1
 8005326:	2109      	movs	r1, #9
 8005328:	f7ff ff8e 	bl	8005248 <std>
 800532c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005330:	2202      	movs	r2, #2
 8005332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005336:	2112      	movs	r1, #18
 8005338:	f7ff bf86 	b.w	8005248 <std>
 800533c:	20004b68 	.word	0x20004b68
 8005340:	20004a30 	.word	0x20004a30
 8005344:	080052b5 	.word	0x080052b5

08005348 <__sfp_lock_acquire>:
 8005348:	4801      	ldr	r0, [pc, #4]	@ (8005350 <__sfp_lock_acquire+0x8>)
 800534a:	f000 b9ee 	b.w	800572a <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	20004b71 	.word	0x20004b71

08005354 <__sfp_lock_release>:
 8005354:	4801      	ldr	r0, [pc, #4]	@ (800535c <__sfp_lock_release+0x8>)
 8005356:	f000 b9e9 	b.w	800572c <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	20004b71 	.word	0x20004b71

08005360 <__sinit>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
 8005364:	f7ff fff0 	bl	8005348 <__sfp_lock_acquire>
 8005368:	6a23      	ldr	r3, [r4, #32]
 800536a:	b11b      	cbz	r3, 8005374 <__sinit+0x14>
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005370:	f7ff bff0 	b.w	8005354 <__sfp_lock_release>
 8005374:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <__sinit+0x28>)
 8005376:	6223      	str	r3, [r4, #32]
 8005378:	4b04      	ldr	r3, [pc, #16]	@ (800538c <__sinit+0x2c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f5      	bne.n	800536c <__sinit+0xc>
 8005380:	f7ff ffc4 	bl	800530c <global_stdio_init.part.0>
 8005384:	e7f2      	b.n	800536c <__sinit+0xc>
 8005386:	bf00      	nop
 8005388:	080052cd 	.word	0x080052cd
 800538c:	20004b68 	.word	0x20004b68

08005390 <_fwalk_sglue>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	4607      	mov	r7, r0
 8005396:	4688      	mov	r8, r1
 8005398:	4614      	mov	r4, r2
 800539a:	2600      	movs	r6, #0
 800539c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a0:	f1b9 0901 	subs.w	r9, r9, #1
 80053a4:	d505      	bpl.n	80053b2 <_fwalk_sglue+0x22>
 80053a6:	6824      	ldr	r4, [r4, #0]
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d1f7      	bne.n	800539c <_fwalk_sglue+0xc>
 80053ac:	4630      	mov	r0, r6
 80053ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d907      	bls.n	80053c8 <_fwalk_sglue+0x38>
 80053b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053bc:	3301      	adds	r3, #1
 80053be:	d003      	beq.n	80053c8 <_fwalk_sglue+0x38>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	4306      	orrs	r6, r0
 80053c8:	3568      	adds	r5, #104	@ 0x68
 80053ca:	e7e9      	b.n	80053a0 <_fwalk_sglue+0x10>

080053cc <_puts_r>:
 80053cc:	6a03      	ldr	r3, [r0, #32]
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	6884      	ldr	r4, [r0, #8]
 80053d2:	4605      	mov	r5, r0
 80053d4:	460e      	mov	r6, r1
 80053d6:	b90b      	cbnz	r3, 80053dc <_puts_r+0x10>
 80053d8:	f7ff ffc2 	bl	8005360 <__sinit>
 80053dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d405      	bmi.n	80053ee <_puts_r+0x22>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	0598      	lsls	r0, r3, #22
 80053e6:	d402      	bmi.n	80053ee <_puts_r+0x22>
 80053e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ea:	f000 f99e 	bl	800572a <__retarget_lock_acquire_recursive>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	0719      	lsls	r1, r3, #28
 80053f2:	d502      	bpl.n	80053fa <_puts_r+0x2e>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d135      	bne.n	8005466 <_puts_r+0x9a>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 f8c5 	bl	800558c <__swsetup_r>
 8005402:	b380      	cbz	r0, 8005466 <_puts_r+0x9a>
 8005404:	f04f 35ff 	mov.w	r5, #4294967295
 8005408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800540a:	07da      	lsls	r2, r3, #31
 800540c:	d405      	bmi.n	800541a <_puts_r+0x4e>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	059b      	lsls	r3, r3, #22
 8005412:	d402      	bmi.n	800541a <_puts_r+0x4e>
 8005414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005416:	f000 f989 	bl	800572c <__retarget_lock_release_recursive>
 800541a:	4628      	mov	r0, r5
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	2b00      	cmp	r3, #0
 8005420:	da04      	bge.n	800542c <_puts_r+0x60>
 8005422:	69a2      	ldr	r2, [r4, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	dc17      	bgt.n	8005458 <_puts_r+0x8c>
 8005428:	290a      	cmp	r1, #10
 800542a:	d015      	beq.n	8005458 <_puts_r+0x8c>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	7019      	strb	r1, [r3, #0]
 8005434:	68a3      	ldr	r3, [r4, #8]
 8005436:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800543a:	3b01      	subs	r3, #1
 800543c:	60a3      	str	r3, [r4, #8]
 800543e:	2900      	cmp	r1, #0
 8005440:	d1ed      	bne.n	800541e <_puts_r+0x52>
 8005442:	2b00      	cmp	r3, #0
 8005444:	da11      	bge.n	800546a <_puts_r+0x9e>
 8005446:	4622      	mov	r2, r4
 8005448:	210a      	movs	r1, #10
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f85f 	bl	800550e <__swbuf_r>
 8005450:	3001      	adds	r0, #1
 8005452:	d0d7      	beq.n	8005404 <_puts_r+0x38>
 8005454:	250a      	movs	r5, #10
 8005456:	e7d7      	b.n	8005408 <_puts_r+0x3c>
 8005458:	4622      	mov	r2, r4
 800545a:	4628      	mov	r0, r5
 800545c:	f000 f857 	bl	800550e <__swbuf_r>
 8005460:	3001      	adds	r0, #1
 8005462:	d1e7      	bne.n	8005434 <_puts_r+0x68>
 8005464:	e7ce      	b.n	8005404 <_puts_r+0x38>
 8005466:	3e01      	subs	r6, #1
 8005468:	e7e4      	b.n	8005434 <_puts_r+0x68>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	6022      	str	r2, [r4, #0]
 8005470:	220a      	movs	r2, #10
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e7ee      	b.n	8005454 <_puts_r+0x88>
	...

08005478 <puts>:
 8005478:	4b02      	ldr	r3, [pc, #8]	@ (8005484 <puts+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f7ff bfa5 	b.w	80053cc <_puts_r>
 8005482:	bf00      	nop
 8005484:	2000001c 	.word	0x2000001c

08005488 <__sread>:
 8005488:	b510      	push	{r4, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	f000 f8fc 	bl	800568c <_read_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	bfab      	itete	ge
 8005498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800549a:	89a3      	ldrhlt	r3, [r4, #12]
 800549c:	181b      	addge	r3, r3, r0
 800549e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054a2:	bfac      	ite	ge
 80054a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054a6:	81a3      	strhlt	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__swrite>:
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	461f      	mov	r7, r3
 80054b0:	898b      	ldrh	r3, [r1, #12]
 80054b2:	05db      	lsls	r3, r3, #23
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4616      	mov	r6, r2
 80054ba:	d505      	bpl.n	80054c8 <__swrite+0x1e>
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f000 f8d0 	bl	8005668 <_lseek_r>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	4628      	mov	r0, r5
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f000 b8e7 	b.w	80056b0 <_write_r>

080054e2 <__sseek>:
 80054e2:	b510      	push	{r4, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ea:	f000 f8bd 	bl	8005668 <_lseek_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	bf15      	itete	ne
 80054f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054fe:	81a3      	strheq	r3, [r4, #12]
 8005500:	bf18      	it	ne
 8005502:	81a3      	strhne	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__sclose>:
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 b89d 	b.w	8005648 <_close_r>

0800550e <__swbuf_r>:
 800550e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005510:	460e      	mov	r6, r1
 8005512:	4614      	mov	r4, r2
 8005514:	4605      	mov	r5, r0
 8005516:	b118      	cbz	r0, 8005520 <__swbuf_r+0x12>
 8005518:	6a03      	ldr	r3, [r0, #32]
 800551a:	b90b      	cbnz	r3, 8005520 <__swbuf_r+0x12>
 800551c:	f7ff ff20 	bl	8005360 <__sinit>
 8005520:	69a3      	ldr	r3, [r4, #24]
 8005522:	60a3      	str	r3, [r4, #8]
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	071a      	lsls	r2, r3, #28
 8005528:	d501      	bpl.n	800552e <__swbuf_r+0x20>
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	b943      	cbnz	r3, 8005540 <__swbuf_r+0x32>
 800552e:	4621      	mov	r1, r4
 8005530:	4628      	mov	r0, r5
 8005532:	f000 f82b 	bl	800558c <__swsetup_r>
 8005536:	b118      	cbz	r0, 8005540 <__swbuf_r+0x32>
 8005538:	f04f 37ff 	mov.w	r7, #4294967295
 800553c:	4638      	mov	r0, r7
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	6922      	ldr	r2, [r4, #16]
 8005544:	1a98      	subs	r0, r3, r2
 8005546:	6963      	ldr	r3, [r4, #20]
 8005548:	b2f6      	uxtb	r6, r6
 800554a:	4283      	cmp	r3, r0
 800554c:	4637      	mov	r7, r6
 800554e:	dc05      	bgt.n	800555c <__swbuf_r+0x4e>
 8005550:	4621      	mov	r1, r4
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fa76 	bl	8005a44 <_fflush_r>
 8005558:	2800      	cmp	r0, #0
 800555a:	d1ed      	bne.n	8005538 <__swbuf_r+0x2a>
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	3b01      	subs	r3, #1
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	6022      	str	r2, [r4, #0]
 8005568:	701e      	strb	r6, [r3, #0]
 800556a:	6962      	ldr	r2, [r4, #20]
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	429a      	cmp	r2, r3
 8005570:	d004      	beq.n	800557c <__swbuf_r+0x6e>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d5e1      	bpl.n	800553c <__swbuf_r+0x2e>
 8005578:	2e0a      	cmp	r6, #10
 800557a:	d1df      	bne.n	800553c <__swbuf_r+0x2e>
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fa60 	bl	8005a44 <_fflush_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	d0d9      	beq.n	800553c <__swbuf_r+0x2e>
 8005588:	e7d6      	b.n	8005538 <__swbuf_r+0x2a>
	...

0800558c <__swsetup_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4b29      	ldr	r3, [pc, #164]	@ (8005634 <__swsetup_r+0xa8>)
 8005590:	4605      	mov	r5, r0
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	460c      	mov	r4, r1
 8005596:	b118      	cbz	r0, 80055a0 <__swsetup_r+0x14>
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b90b      	cbnz	r3, 80055a0 <__swsetup_r+0x14>
 800559c:	f7ff fee0 	bl	8005360 <__sinit>
 80055a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a4:	0719      	lsls	r1, r3, #28
 80055a6:	d422      	bmi.n	80055ee <__swsetup_r+0x62>
 80055a8:	06da      	lsls	r2, r3, #27
 80055aa:	d407      	bmi.n	80055bc <__swsetup_r+0x30>
 80055ac:	2209      	movs	r2, #9
 80055ae:	602a      	str	r2, [r5, #0]
 80055b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	e033      	b.n	8005624 <__swsetup_r+0x98>
 80055bc:	0758      	lsls	r0, r3, #29
 80055be:	d512      	bpl.n	80055e6 <__swsetup_r+0x5a>
 80055c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055c2:	b141      	cbz	r1, 80055d6 <__swsetup_r+0x4a>
 80055c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d002      	beq.n	80055d2 <__swsetup_r+0x46>
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 f8bd 	bl	800574c <_free_r>
 80055d2:	2300      	movs	r3, #0
 80055d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	2300      	movs	r3, #0
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0308 	orr.w	r3, r3, #8
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	b94b      	cbnz	r3, 8005606 <__swsetup_r+0x7a>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055fc:	d003      	beq.n	8005606 <__swsetup_r+0x7a>
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 fa6d 	bl	8005ae0 <__smakebuf_r>
 8005606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560a:	f013 0201 	ands.w	r2, r3, #1
 800560e:	d00a      	beq.n	8005626 <__swsetup_r+0x9a>
 8005610:	2200      	movs	r2, #0
 8005612:	60a2      	str	r2, [r4, #8]
 8005614:	6962      	ldr	r2, [r4, #20]
 8005616:	4252      	negs	r2, r2
 8005618:	61a2      	str	r2, [r4, #24]
 800561a:	6922      	ldr	r2, [r4, #16]
 800561c:	b942      	cbnz	r2, 8005630 <__swsetup_r+0xa4>
 800561e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005622:	d1c5      	bne.n	80055b0 <__swsetup_r+0x24>
 8005624:	bd38      	pop	{r3, r4, r5, pc}
 8005626:	0799      	lsls	r1, r3, #30
 8005628:	bf58      	it	pl
 800562a:	6962      	ldrpl	r2, [r4, #20]
 800562c:	60a2      	str	r2, [r4, #8]
 800562e:	e7f4      	b.n	800561a <__swsetup_r+0x8e>
 8005630:	2000      	movs	r0, #0
 8005632:	e7f7      	b.n	8005624 <__swsetup_r+0x98>
 8005634:	2000001c 	.word	0x2000001c

08005638 <memset>:
 8005638:	4402      	add	r2, r0
 800563a:	4603      	mov	r3, r0
 800563c:	4293      	cmp	r3, r2
 800563e:	d100      	bne.n	8005642 <memset+0xa>
 8005640:	4770      	bx	lr
 8005642:	f803 1b01 	strb.w	r1, [r3], #1
 8005646:	e7f9      	b.n	800563c <memset+0x4>

08005648 <_close_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d06      	ldr	r5, [pc, #24]	@ (8005664 <_close_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fb fabf 	bl	8000bd6 <_close>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_close_r+0x1a>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_close_r+0x1a>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20004b6c 	.word	0x20004b6c

08005668 <_lseek_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	@ (8005688 <_lseek_r+0x20>)
 800566c:	4604      	mov	r4, r0
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	2200      	movs	r2, #0
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb fad4 	bl	8000c24 <_lseek>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_lseek_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_lseek_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20004b6c 	.word	0x20004b6c

0800568c <_read_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	@ (80056ac <_read_r+0x20>)
 8005690:	4604      	mov	r4, r0
 8005692:	4608      	mov	r0, r1
 8005694:	4611      	mov	r1, r2
 8005696:	2200      	movs	r2, #0
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fb fa7e 	bl	8000b9c <_read>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_read_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_read_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20004b6c 	.word	0x20004b6c

080056b0 <_write_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	@ (80056d0 <_write_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fb f9b4 	bl	8000a2c <_write>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_write_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_write_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20004b6c 	.word	0x20004b6c

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	@ (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000001c 	.word	0x2000001c

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	@ (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 fa62 	bl	8005bbc <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08005d10 	.word	0x08005d10
 800571c:	08005d10 	.word	0x08005d10
 8005720:	08005d10 	.word	0x08005d10
 8005724:	08005d14 	.word	0x08005d14

08005728 <__retarget_lock_init_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_acquire_recursive>:
 800572a:	4770      	bx	lr

0800572c <__retarget_lock_release_recursive>:
 800572c:	4770      	bx	lr

0800572e <memcpy>:
 800572e:	440a      	add	r2, r1
 8005730:	4291      	cmp	r1, r2
 8005732:	f100 33ff 	add.w	r3, r0, #4294967295
 8005736:	d100      	bne.n	800573a <memcpy+0xc>
 8005738:	4770      	bx	lr
 800573a:	b510      	push	{r4, lr}
 800573c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005744:	4291      	cmp	r1, r2
 8005746:	d1f9      	bne.n	800573c <memcpy+0xe>
 8005748:	bd10      	pop	{r4, pc}
	...

0800574c <_free_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4605      	mov	r5, r0
 8005750:	2900      	cmp	r1, #0
 8005752:	d041      	beq.n	80057d8 <_free_r+0x8c>
 8005754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005758:	1f0c      	subs	r4, r1, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	bfb8      	it	lt
 800575e:	18e4      	addlt	r4, r4, r3
 8005760:	f000 f8e0 	bl	8005924 <__malloc_lock>
 8005764:	4a1d      	ldr	r2, [pc, #116]	@ (80057dc <_free_r+0x90>)
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	b933      	cbnz	r3, 8005778 <_free_r+0x2c>
 800576a:	6063      	str	r3, [r4, #4]
 800576c:	6014      	str	r4, [r2, #0]
 800576e:	4628      	mov	r0, r5
 8005770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005774:	f000 b8dc 	b.w	8005930 <__malloc_unlock>
 8005778:	42a3      	cmp	r3, r4
 800577a:	d908      	bls.n	800578e <_free_r+0x42>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	1821      	adds	r1, r4, r0
 8005780:	428b      	cmp	r3, r1
 8005782:	bf01      	itttt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	1809      	addeq	r1, r1, r0
 800578a:	6021      	streq	r1, [r4, #0]
 800578c:	e7ed      	b.n	800576a <_free_r+0x1e>
 800578e:	461a      	mov	r2, r3
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	b10b      	cbz	r3, 8005798 <_free_r+0x4c>
 8005794:	42a3      	cmp	r3, r4
 8005796:	d9fa      	bls.n	800578e <_free_r+0x42>
 8005798:	6811      	ldr	r1, [r2, #0]
 800579a:	1850      	adds	r0, r2, r1
 800579c:	42a0      	cmp	r0, r4
 800579e:	d10b      	bne.n	80057b8 <_free_r+0x6c>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	4401      	add	r1, r0
 80057a4:	1850      	adds	r0, r2, r1
 80057a6:	4283      	cmp	r3, r0
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	d1e0      	bne.n	800576e <_free_r+0x22>
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	6053      	str	r3, [r2, #4]
 80057b2:	4408      	add	r0, r1
 80057b4:	6010      	str	r0, [r2, #0]
 80057b6:	e7da      	b.n	800576e <_free_r+0x22>
 80057b8:	d902      	bls.n	80057c0 <_free_r+0x74>
 80057ba:	230c      	movs	r3, #12
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	e7d6      	b.n	800576e <_free_r+0x22>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	1821      	adds	r1, r4, r0
 80057c4:	428b      	cmp	r3, r1
 80057c6:	bf04      	itt	eq
 80057c8:	6819      	ldreq	r1, [r3, #0]
 80057ca:	685b      	ldreq	r3, [r3, #4]
 80057cc:	6063      	str	r3, [r4, #4]
 80057ce:	bf04      	itt	eq
 80057d0:	1809      	addeq	r1, r1, r0
 80057d2:	6021      	streq	r1, [r4, #0]
 80057d4:	6054      	str	r4, [r2, #4]
 80057d6:	e7ca      	b.n	800576e <_free_r+0x22>
 80057d8:	bd38      	pop	{r3, r4, r5, pc}
 80057da:	bf00      	nop
 80057dc:	20004b78 	.word	0x20004b78

080057e0 <sbrk_aligned>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005820 <sbrk_aligned+0x40>)
 80057e4:	460c      	mov	r4, r1
 80057e6:	6831      	ldr	r1, [r6, #0]
 80057e8:	4605      	mov	r5, r0
 80057ea:	b911      	cbnz	r1, 80057f2 <sbrk_aligned+0x12>
 80057ec:	f000 f9d6 	bl	8005b9c <_sbrk_r>
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f9d1 	bl	8005b9c <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d103      	bne.n	8005806 <sbrk_aligned+0x26>
 80057fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005802:	4620      	mov	r0, r4
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	1cc4      	adds	r4, r0, #3
 8005808:	f024 0403 	bic.w	r4, r4, #3
 800580c:	42a0      	cmp	r0, r4
 800580e:	d0f8      	beq.n	8005802 <sbrk_aligned+0x22>
 8005810:	1a21      	subs	r1, r4, r0
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f9c2 	bl	8005b9c <_sbrk_r>
 8005818:	3001      	adds	r0, #1
 800581a:	d1f2      	bne.n	8005802 <sbrk_aligned+0x22>
 800581c:	e7ef      	b.n	80057fe <sbrk_aligned+0x1e>
 800581e:	bf00      	nop
 8005820:	20004b74 	.word	0x20004b74

08005824 <_malloc_r>:
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005828:	1ccd      	adds	r5, r1, #3
 800582a:	f025 0503 	bic.w	r5, r5, #3
 800582e:	3508      	adds	r5, #8
 8005830:	2d0c      	cmp	r5, #12
 8005832:	bf38      	it	cc
 8005834:	250c      	movcc	r5, #12
 8005836:	2d00      	cmp	r5, #0
 8005838:	4606      	mov	r6, r0
 800583a:	db01      	blt.n	8005840 <_malloc_r+0x1c>
 800583c:	42a9      	cmp	r1, r5
 800583e:	d904      	bls.n	800584a <_malloc_r+0x26>
 8005840:	230c      	movs	r3, #12
 8005842:	6033      	str	r3, [r6, #0]
 8005844:	2000      	movs	r0, #0
 8005846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800584a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005920 <_malloc_r+0xfc>
 800584e:	f000 f869 	bl	8005924 <__malloc_lock>
 8005852:	f8d8 3000 	ldr.w	r3, [r8]
 8005856:	461c      	mov	r4, r3
 8005858:	bb44      	cbnz	r4, 80058ac <_malloc_r+0x88>
 800585a:	4629      	mov	r1, r5
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff ffbf 	bl	80057e0 <sbrk_aligned>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	4604      	mov	r4, r0
 8005866:	d158      	bne.n	800591a <_malloc_r+0xf6>
 8005868:	f8d8 4000 	ldr.w	r4, [r8]
 800586c:	4627      	mov	r7, r4
 800586e:	2f00      	cmp	r7, #0
 8005870:	d143      	bne.n	80058fa <_malloc_r+0xd6>
 8005872:	2c00      	cmp	r4, #0
 8005874:	d04b      	beq.n	800590e <_malloc_r+0xea>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	4639      	mov	r1, r7
 800587a:	4630      	mov	r0, r6
 800587c:	eb04 0903 	add.w	r9, r4, r3
 8005880:	f000 f98c 	bl	8005b9c <_sbrk_r>
 8005884:	4581      	cmp	r9, r0
 8005886:	d142      	bne.n	800590e <_malloc_r+0xea>
 8005888:	6821      	ldr	r1, [r4, #0]
 800588a:	1a6d      	subs	r5, r5, r1
 800588c:	4629      	mov	r1, r5
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ffa6 	bl	80057e0 <sbrk_aligned>
 8005894:	3001      	adds	r0, #1
 8005896:	d03a      	beq.n	800590e <_malloc_r+0xea>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	442b      	add	r3, r5
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	f8d8 3000 	ldr.w	r3, [r8]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	bb62      	cbnz	r2, 8005900 <_malloc_r+0xdc>
 80058a6:	f8c8 7000 	str.w	r7, [r8]
 80058aa:	e00f      	b.n	80058cc <_malloc_r+0xa8>
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	1b52      	subs	r2, r2, r5
 80058b0:	d420      	bmi.n	80058f4 <_malloc_r+0xd0>
 80058b2:	2a0b      	cmp	r2, #11
 80058b4:	d917      	bls.n	80058e6 <_malloc_r+0xc2>
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	6025      	str	r5, [r4, #0]
 80058bc:	bf18      	it	ne
 80058be:	6059      	strne	r1, [r3, #4]
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	bf08      	it	eq
 80058c4:	f8c8 1000 	streq.w	r1, [r8]
 80058c8:	5162      	str	r2, [r4, r5]
 80058ca:	604b      	str	r3, [r1, #4]
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 f82f 	bl	8005930 <__malloc_unlock>
 80058d2:	f104 000b 	add.w	r0, r4, #11
 80058d6:	1d23      	adds	r3, r4, #4
 80058d8:	f020 0007 	bic.w	r0, r0, #7
 80058dc:	1ac2      	subs	r2, r0, r3
 80058de:	bf1c      	itt	ne
 80058e0:	1a1b      	subne	r3, r3, r0
 80058e2:	50a3      	strne	r3, [r4, r2]
 80058e4:	e7af      	b.n	8005846 <_malloc_r+0x22>
 80058e6:	6862      	ldr	r2, [r4, #4]
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	bf0c      	ite	eq
 80058ec:	f8c8 2000 	streq.w	r2, [r8]
 80058f0:	605a      	strne	r2, [r3, #4]
 80058f2:	e7eb      	b.n	80058cc <_malloc_r+0xa8>
 80058f4:	4623      	mov	r3, r4
 80058f6:	6864      	ldr	r4, [r4, #4]
 80058f8:	e7ae      	b.n	8005858 <_malloc_r+0x34>
 80058fa:	463c      	mov	r4, r7
 80058fc:	687f      	ldr	r7, [r7, #4]
 80058fe:	e7b6      	b.n	800586e <_malloc_r+0x4a>
 8005900:	461a      	mov	r2, r3
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	42a3      	cmp	r3, r4
 8005906:	d1fb      	bne.n	8005900 <_malloc_r+0xdc>
 8005908:	2300      	movs	r3, #0
 800590a:	6053      	str	r3, [r2, #4]
 800590c:	e7de      	b.n	80058cc <_malloc_r+0xa8>
 800590e:	230c      	movs	r3, #12
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	4630      	mov	r0, r6
 8005914:	f000 f80c 	bl	8005930 <__malloc_unlock>
 8005918:	e794      	b.n	8005844 <_malloc_r+0x20>
 800591a:	6005      	str	r5, [r0, #0]
 800591c:	e7d6      	b.n	80058cc <_malloc_r+0xa8>
 800591e:	bf00      	nop
 8005920:	20004b78 	.word	0x20004b78

08005924 <__malloc_lock>:
 8005924:	4801      	ldr	r0, [pc, #4]	@ (800592c <__malloc_lock+0x8>)
 8005926:	f7ff bf00 	b.w	800572a <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	20004b70 	.word	0x20004b70

08005930 <__malloc_unlock>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__malloc_unlock+0x8>)
 8005932:	f7ff befb 	b.w	800572c <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	20004b70 	.word	0x20004b70

0800593c <__sflush_r>:
 800593c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	0716      	lsls	r6, r2, #28
 8005946:	4605      	mov	r5, r0
 8005948:	460c      	mov	r4, r1
 800594a:	d454      	bmi.n	80059f6 <__sflush_r+0xba>
 800594c:	684b      	ldr	r3, [r1, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	dc02      	bgt.n	8005958 <__sflush_r+0x1c>
 8005952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd48      	ble.n	80059ea <__sflush_r+0xae>
 8005958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800595a:	2e00      	cmp	r6, #0
 800595c:	d045      	beq.n	80059ea <__sflush_r+0xae>
 800595e:	2300      	movs	r3, #0
 8005960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005964:	682f      	ldr	r7, [r5, #0]
 8005966:	6a21      	ldr	r1, [r4, #32]
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	d030      	beq.n	80059ce <__sflush_r+0x92>
 800596c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	0759      	lsls	r1, r3, #29
 8005972:	d505      	bpl.n	8005980 <__sflush_r+0x44>
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800597a:	b10b      	cbz	r3, 8005980 <__sflush_r+0x44>
 800597c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800597e:	1ad2      	subs	r2, r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005984:	6a21      	ldr	r1, [r4, #32]
 8005986:	4628      	mov	r0, r5
 8005988:	47b0      	blx	r6
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	d106      	bne.n	800599e <__sflush_r+0x62>
 8005990:	6829      	ldr	r1, [r5, #0]
 8005992:	291d      	cmp	r1, #29
 8005994:	d82b      	bhi.n	80059ee <__sflush_r+0xb2>
 8005996:	4a2a      	ldr	r2, [pc, #168]	@ (8005a40 <__sflush_r+0x104>)
 8005998:	40ca      	lsrs	r2, r1
 800599a:	07d6      	lsls	r6, r2, #31
 800599c:	d527      	bpl.n	80059ee <__sflush_r+0xb2>
 800599e:	2200      	movs	r2, #0
 80059a0:	6062      	str	r2, [r4, #4]
 80059a2:	04d9      	lsls	r1, r3, #19
 80059a4:	6922      	ldr	r2, [r4, #16]
 80059a6:	6022      	str	r2, [r4, #0]
 80059a8:	d504      	bpl.n	80059b4 <__sflush_r+0x78>
 80059aa:	1c42      	adds	r2, r0, #1
 80059ac:	d101      	bne.n	80059b2 <__sflush_r+0x76>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	b903      	cbnz	r3, 80059b4 <__sflush_r+0x78>
 80059b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80059b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059b6:	602f      	str	r7, [r5, #0]
 80059b8:	b1b9      	cbz	r1, 80059ea <__sflush_r+0xae>
 80059ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059be:	4299      	cmp	r1, r3
 80059c0:	d002      	beq.n	80059c8 <__sflush_r+0x8c>
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7ff fec2 	bl	800574c <_free_r>
 80059c8:	2300      	movs	r3, #0
 80059ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80059cc:	e00d      	b.n	80059ea <__sflush_r+0xae>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b0      	blx	r6
 80059d4:	4602      	mov	r2, r0
 80059d6:	1c50      	adds	r0, r2, #1
 80059d8:	d1c9      	bne.n	800596e <__sflush_r+0x32>
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0c6      	beq.n	800596e <__sflush_r+0x32>
 80059e0:	2b1d      	cmp	r3, #29
 80059e2:	d001      	beq.n	80059e8 <__sflush_r+0xac>
 80059e4:	2b16      	cmp	r3, #22
 80059e6:	d11e      	bne.n	8005a26 <__sflush_r+0xea>
 80059e8:	602f      	str	r7, [r5, #0]
 80059ea:	2000      	movs	r0, #0
 80059ec:	e022      	b.n	8005a34 <__sflush_r+0xf8>
 80059ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	e01b      	b.n	8005a2e <__sflush_r+0xf2>
 80059f6:	690f      	ldr	r7, [r1, #16]
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	d0f6      	beq.n	80059ea <__sflush_r+0xae>
 80059fc:	0793      	lsls	r3, r2, #30
 80059fe:	680e      	ldr	r6, [r1, #0]
 8005a00:	bf08      	it	eq
 8005a02:	694b      	ldreq	r3, [r1, #20]
 8005a04:	600f      	str	r7, [r1, #0]
 8005a06:	bf18      	it	ne
 8005a08:	2300      	movne	r3, #0
 8005a0a:	eba6 0807 	sub.w	r8, r6, r7
 8005a0e:	608b      	str	r3, [r1, #8]
 8005a10:	f1b8 0f00 	cmp.w	r8, #0
 8005a14:	dde9      	ble.n	80059ea <__sflush_r+0xae>
 8005a16:	6a21      	ldr	r1, [r4, #32]
 8005a18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a1a:	4643      	mov	r3, r8
 8005a1c:	463a      	mov	r2, r7
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b0      	blx	r6
 8005a22:	2800      	cmp	r0, #0
 8005a24:	dc08      	bgt.n	8005a38 <__sflush_r+0xfc>
 8005a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	4407      	add	r7, r0
 8005a3a:	eba8 0800 	sub.w	r8, r8, r0
 8005a3e:	e7e7      	b.n	8005a10 <__sflush_r+0xd4>
 8005a40:	20400001 	.word	0x20400001

08005a44 <_fflush_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b913      	cbnz	r3, 8005a54 <_fflush_r+0x10>
 8005a4e:	2500      	movs	r5, #0
 8005a50:	4628      	mov	r0, r5
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	b118      	cbz	r0, 8005a5e <_fflush_r+0x1a>
 8005a56:	6a03      	ldr	r3, [r0, #32]
 8005a58:	b90b      	cbnz	r3, 8005a5e <_fflush_r+0x1a>
 8005a5a:	f7ff fc81 	bl	8005360 <__sinit>
 8005a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f3      	beq.n	8005a4e <_fflush_r+0xa>
 8005a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a68:	07d0      	lsls	r0, r2, #31
 8005a6a:	d404      	bmi.n	8005a76 <_fflush_r+0x32>
 8005a6c:	0599      	lsls	r1, r3, #22
 8005a6e:	d402      	bmi.n	8005a76 <_fflush_r+0x32>
 8005a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a72:	f7ff fe5a 	bl	800572a <__retarget_lock_acquire_recursive>
 8005a76:	4628      	mov	r0, r5
 8005a78:	4621      	mov	r1, r4
 8005a7a:	f7ff ff5f 	bl	800593c <__sflush_r>
 8005a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a80:	07da      	lsls	r2, r3, #31
 8005a82:	4605      	mov	r5, r0
 8005a84:	d4e4      	bmi.n	8005a50 <_fflush_r+0xc>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	d4e1      	bmi.n	8005a50 <_fflush_r+0xc>
 8005a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a8e:	f7ff fe4d 	bl	800572c <__retarget_lock_release_recursive>
 8005a92:	e7dd      	b.n	8005a50 <_fflush_r+0xc>

08005a94 <__swhatbuf_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	460c      	mov	r4, r1
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	b096      	sub	sp, #88	@ 0x58
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	461e      	mov	r6, r3
 8005aa4:	da0d      	bge.n	8005ac2 <__swhatbuf_r+0x2e>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2340      	movne	r3, #64	@ 0x40
 8005ab4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ab8:	2000      	movs	r0, #0
 8005aba:	6031      	str	r1, [r6, #0]
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	b016      	add	sp, #88	@ 0x58
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	466a      	mov	r2, sp
 8005ac4:	f000 f848 	bl	8005b58 <_fstat_r>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dbec      	blt.n	8005aa6 <__swhatbuf_r+0x12>
 8005acc:	9901      	ldr	r1, [sp, #4]
 8005ace:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ad2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ad6:	4259      	negs	r1, r3
 8005ad8:	4159      	adcs	r1, r3
 8005ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ade:	e7eb      	b.n	8005ab8 <__swhatbuf_r+0x24>

08005ae0 <__smakebuf_r>:
 8005ae0:	898b      	ldrh	r3, [r1, #12]
 8005ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae4:	079d      	lsls	r5, r3, #30
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	d507      	bpl.n	8005afc <__smakebuf_r+0x1c>
 8005aec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	2301      	movs	r3, #1
 8005af6:	6163      	str	r3, [r4, #20]
 8005af8:	b003      	add	sp, #12
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afc:	ab01      	add	r3, sp, #4
 8005afe:	466a      	mov	r2, sp
 8005b00:	f7ff ffc8 	bl	8005a94 <__swhatbuf_r>
 8005b04:	9f00      	ldr	r7, [sp, #0]
 8005b06:	4605      	mov	r5, r0
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7ff fe8a 	bl	8005824 <_malloc_r>
 8005b10:	b948      	cbnz	r0, 8005b26 <__smakebuf_r+0x46>
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	059a      	lsls	r2, r3, #22
 8005b18:	d4ee      	bmi.n	8005af8 <__smakebuf_r+0x18>
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	f043 0302 	orr.w	r3, r3, #2
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	e7e2      	b.n	8005aec <__smakebuf_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	6020      	str	r0, [r4, #0]
 8005b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	9b01      	ldr	r3, [sp, #4]
 8005b32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b36:	b15b      	cbz	r3, 8005b50 <__smakebuf_r+0x70>
 8005b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f000 f81d 	bl	8005b7c <_isatty_r>
 8005b42:	b128      	cbz	r0, 8005b50 <__smakebuf_r+0x70>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	431d      	orrs	r5, r3
 8005b54:	81a5      	strh	r5, [r4, #12]
 8005b56:	e7cf      	b.n	8005af8 <__smakebuf_r+0x18>

08005b58 <_fstat_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	@ (8005b78 <_fstat_r+0x20>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	f7fb f842 	bl	8000bee <_fstat>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d102      	bne.n	8005b74 <_fstat_r+0x1c>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	b103      	cbz	r3, 8005b74 <_fstat_r+0x1c>
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	20004b6c 	.word	0x20004b6c

08005b7c <_isatty_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	@ (8005b98 <_isatty_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fb f841 	bl	8000c0e <_isatty>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_isatty_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_isatty_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20004b6c 	.word	0x20004b6c

08005b9c <_sbrk_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d06      	ldr	r5, [pc, #24]	@ (8005bb8 <_sbrk_r+0x1c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb f84a 	bl	8000c40 <_sbrk>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_sbrk_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_sbrk_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20004b6c 	.word	0x20004b6c

08005bbc <_init>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr

08005bc8 <_fini>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	bf00      	nop
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr
